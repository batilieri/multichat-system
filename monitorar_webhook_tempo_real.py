#!/usr/bin/env python3
"""
üîç MONITOR WEBHOOK TEMPO REAL
Monitora webhooks em tempo real para verificar se download autom√°tico est√° funcionando
"""

import os
import sys
import django
import time
from datetime import datetime, timedelta
from pathlib import Path

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'multichat_system.multichat.settings')
sys.path.append('multichat_system')
django.setup()

from webhook.models import WebhookEvent

class MonitorWebhookTempoReal:
    def __init__(self):
        self.ultimo_webhook_verificado = None
        self.arquivos_conhecidos = set()
        self.inicializar_estado()
    
    def inicializar_estado(self):
        """Inicializa o estado atual do monitor"""
        print("üîÑ INICIALIZANDO MONITOR WEBHOOK TEMPO REAL")
        print("=" * 60)
        
        # Obter √∫ltimo webhook
        ultimo = WebhookEvent.objects.all().order_by('-timestamp').first()
        if ultimo:
            self.ultimo_webhook_verificado = ultimo.timestamp
            print(f"üìÖ √öltimo webhook conhecido: {ultimo.timestamp}")
            print(f"üÜî Event ID: {ultimo.event_id}")
        else:
            print("‚ùå Nenhum webhook encontrado")
        
        # Mapear arquivos existentes
        media_path = Path("multichat_system/media_storage")
        if media_path.exists():
            for arquivo in media_path.rglob("*.mp3"):
                self.arquivos_conhecidos.add(str(arquivo))
            print(f"üìÅ Arquivos existentes mapeados: {len(self.arquivos_conhecidos)}")
        
        print("‚úÖ Monitor inicializado! Aguardando novos webhooks...")
    
    def verificar_novos_webhooks(self):
        """Verifica se h√° novos webhooks desde a √∫ltima verifica√ß√£o"""
        if not self.ultimo_webhook_verificado:
            return []
        
        novos_webhooks = WebhookEvent.objects.filter(
            timestamp__gt=self.ultimo_webhook_verificado
        ).order_by('timestamp')
        
        if novos_webhooks.exists():
            # Atualizar √∫ltimo webhook verificado
            self.ultimo_webhook_verificado = novos_webhooks.last().timestamp
        
        return list(novos_webhooks)
    
    def verificar_novos_arquivos(self):
        """Verifica se h√° novos arquivos de m√≠dia"""
        novos_arquivos = []
        
        media_path = Path("multichat_system/media_storage")
        if media_path.exists():
            for arquivo in media_path.rglob("*.mp3"):
                if str(arquivo) not in self.arquivos_conhecidos:
                    novos_arquivos.append(arquivo)
                    self.arquivos_conhecidos.add(str(arquivo))
        
        return novos_arquivos
    
    def analisar_webhook(self, webhook):
        """Analisa um webhook espec√≠fico"""
        try:
            data = webhook.raw_data
            msg_content = data.get('msgContent', {})
            
            tem_audio = 'audioMessage' in msg_content
            tem_imagem = 'imageMessage' in msg_content
            tem_video = 'videoMessage' in msg_content
            tem_documento = 'documentMessage' in msg_content
            
            tipos_midia = []
            if tem_audio: tipos_midia.append('üéµ audio')
            if tem_imagem: tipos_midia.append('üñºÔ∏è imagem')
            if tem_video: tipos_midia.append('üé¨ video')
            if tem_documento: tipos_midia.append('üìÑ documento')
            
            return {
                'tem_midia': bool(tipos_midia),
                'tipos': tipos_midia,
                'message_id': data.get('messageId', 'N/A'),
                'from_me': data.get('fromMe', False),
                'event_type': webhook.event_type,
                'processed': webhook.processed
            }
        
        except Exception as e:
            return {
                'tem_midia': False,
                'tipos': [],
                'erro': str(e)
            }
    
    def monitorar_tempo_real(self, duracao_segundos=300):
        """Monitora webhooks em tempo real por X segundos"""
        print(f"\nüöÄ INICIANDO MONITORAMENTO EM TEMPO REAL")
        print(f"‚è±Ô∏è Dura√ß√£o: {duracao_segundos} segundos")
        print("üì± Envie um √°udio pelo WhatsApp agora!")
        print("=" * 60)
        
        inicio = datetime.now()
        ultimo_relatorio = inicio
        
        while (datetime.now() - inicio).seconds < duracao_segundos:
            # Verificar novos webhooks
            novos_webhooks = self.verificar_novos_webhooks()
            
            # Verificar novos arquivos
            novos_arquivos = self.verificar_novos_arquivos()
            
            # Processar novos webhooks
            for webhook in novos_webhooks:
                analise = self.analisar_webhook(webhook)
                
                print(f"\nüÜï NOVO WEBHOOK: {webhook.timestamp}")
                print(f"   üÜî ID: {webhook.event_id}")
                print(f"   üë§ Cliente: {webhook.cliente.nome}")
                print(f"   üìß Message ID: {analise.get('message_id', 'N/A')}")
                print(f"   üì§ From Me: {analise.get('from_me', False)}")
                print(f"   üè∑Ô∏è Event Type: {analise.get('event_type', 'N/A')}")
                print(f"   ‚úÖ Processed: {analise.get('processed', False)}")
                
                if analise['tem_midia']:
                    print(f"   üìé M√çDIA DETECTADA: {', '.join(analise['tipos'])}")
                    print(f"   üîÑ AGUARDANDO DOWNLOAD AUTOM√ÅTICO...")
                else:
                    print(f"   üí¨ Mensagem de texto (sem m√≠dia)")
            
            # Processar novos arquivos
            for arquivo in novos_arquivos:
                mod_time = datetime.fromtimestamp(arquivo.stat().st_mtime)
                tamanho = arquivo.stat().st_size
                
                print(f"\nüìÅ NOVO ARQUIVO BAIXADO:")
                print(f"   üìÑ Nome: {arquivo.name}")
                print(f"   üìÇ Pasta: {arquivo.parent}")
                print(f"   üìè Tamanho: {tamanho} bytes")
                print(f"   üïí Criado: {mod_time}")
                print(f"   ‚úÖ DOWNLOAD AUTOM√ÅTICO FUNCIONOU!")
            
            # Relat√≥rio peri√≥dico
            agora = datetime.now()
            if (agora - ultimo_relatorio).seconds >= 30:
                tempo_decorrido = (agora - inicio).seconds
                restante = duracao_segundos - tempo_decorrido
                print(f"\n‚è±Ô∏è {tempo_decorrido}s decorridos, {restante}s restantes...")
                ultimo_relatorio = agora
            
            # Pequena pausa para n√£o sobrecarregar
            time.sleep(2)
        
        # Relat√≥rio final
        self.gerar_relatorio_final(inicio)
    
    def gerar_relatorio_final(self, inicio):
        """Gera relat√≥rio final do monitoramento"""
        print(f"\n" + "=" * 60)
        print("üìä RELAT√ìRIO FINAL DO MONITORAMENTO")
        print("=" * 60)
        
        total_webhooks = WebhookEvent.objects.filter(
            timestamp__gte=inicio
        ).count()
        
        total_arquivos_novos = 0
        media_path = Path("multichat_system/media_storage")
        if media_path.exists():
            for arquivo in media_path.rglob("*.mp3"):
                mod_time = datetime.fromtimestamp(arquivo.stat().st_mtime)
                if mod_time >= inicio:
                    total_arquivos_novos += 1
        
        print(f"üìà Estat√≠sticas do per√≠odo:")
        print(f"   üì® Webhooks recebidos: {total_webhooks}")
        print(f"   üìÅ Arquivos baixados: {total_arquivos_novos}")
        
        if total_webhooks > 0 and total_arquivos_novos > 0:
            print(f"\nüéâ SUCESSO! Download autom√°tico est√° funcionando!")
        elif total_webhooks > 0 and total_arquivos_novos == 0:
            print(f"\n‚ö†Ô∏è Webhooks recebidos mas nenhum arquivo baixado")
            print(f"   üîß Verificar se eram mensagens com m√≠dia")
        else:
            print(f"\nüì≠ Nenhum webhook recebido durante o monitoramento")
            print(f"   üí° Envie uma mensagem de √°udio pelo WhatsApp")
    
    def status_atual(self):
        """Mostra status atual do sistema"""
        print(f"\nüìä STATUS ATUAL DO SISTEMA")
        print("=" * 60)
        
        # √öltimos webhooks
        ultimos = WebhookEvent.objects.all().order_by('-timestamp')[:5]
        print(f"üì® √öltimos 5 webhooks:")
        for webhook in ultimos:
            print(f"   üïí {webhook.timestamp} - {webhook.event_type} - {webhook.cliente.nome}")
        
        # √öltimos arquivos
        media_path = Path("multichat_system/media_storage")
        arquivos_recentes = []
        
        if media_path.exists():
            for arquivo in media_path.rglob("*.mp3"):
                mod_time = datetime.fromtimestamp(arquivo.stat().st_mtime)
                arquivos_recentes.append((arquivo, mod_time))
        
        # Ordenar por data de modifica√ß√£o
        arquivos_recentes.sort(key=lambda x: x[1], reverse=True)
        
        print(f"\nüìÅ √öltimos 5 arquivos baixados:")
        for arquivo, mod_time in arquivos_recentes[:5]:
            print(f"   üïí {mod_time} - {arquivo.name}")

def main():
    """Fun√ß√£o principal"""
    monitor = MonitorWebhookTempoReal()
    
    print("üîç MONITOR WEBHOOK TEMPO REAL")
    print("=" * 80)
    print("OBJETIVO: Verificar se download autom√°tico funciona para novos √°udios")
    print("=" * 80)
    
    # Mostrar status atual
    monitor.status_atual()
    
    # Perguntar se quer monitorar
    print(f"\nüí° INSTRU√á√ïES:")
    print("1. Mantenha este script rodando")
    print("2. Envie um √°udio pelo WhatsApp")
    print("3. Observe se aparece 'NOVO WEBHOOK' e 'NOVO ARQUIVO BAIXADO'")
    
    try:
        # Monitorar por 5 minutos
        monitor.monitorar_tempo_real(300)
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è Monitoramento interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante monitoramento: {e}")

if __name__ == "__main__":
    main() 