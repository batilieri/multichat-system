#!/usr/bin/env python3
"""
üîß CORRE√á√ÉO DOWNLOAD AUTOM√ÅTICO WEBHOOK REAL
1. Corrige a fun√ß√£o process_media_automatically que n√£o est√° funcionando
2. Implementa estrutura de pastas por nome do cliente
3. Garante download autom√°tico para todos os tipos de m√≠dia
"""

import os
import sys
import django
from pathlib import Path

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'multichat_system.multichat.settings')
sys.path.append('multichat_system')
django.setup()

def diagnosticar_problema_webhook():
    """Diagnostica por que o download autom√°tico n√£o est√° funcionando"""
    print("üîç DIAGN√ìSTICO: POR QUE O DOWNLOAD AUTOM√ÅTICO N√ÉO FUNCIONA")
    print("=" * 80)
    
    print("üìä An√°lise do log do webhook:")
    print("‚úÖ Webhook sendo processado: process_webhook_message() chamada")
    print("‚úÖ Cliente identificado: Elizeu Batiliere Dos Santos")
    print("‚úÖ M√≠dia detectada: audioMessage encontrada")
    print("‚ùå N√ÉO aparece: 'üìé M√≠dia detectada: audio'")
    print("‚ùå N√ÉO aparece: 'üîÑ Iniciando download da m√≠dia...'")
    
    print(f"\nüéØ PROBLEMA IDENTIFICADO:")
    print("   A fun√ß√£o process_media_automatically() n√£o est√° sendo executada!")
    print("   Poss√≠veis causas:")
    print("   1. Condition if media_downloaded: impedindo execu√ß√£o")
    print("   2. Fun√ß√£o process_media_automatically() tem bug")
    print("   3. Exception silenciosa")
    
    return True

def corrigir_process_media_automatically():
    """Corrige a fun√ß√£o process_media_automatically para funcionar corretamente"""
    print(f"\nüîß CORRIGINDO FUN√á√ÉO process_media_automatically")
    print("=" * 80)
    
    arquivo_views = "multichat_system/webhook/views.py"
    
    # Ler arquivo atual
    with open(arquivo_views, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Identificar problemas na fun√ß√£o atual
    print("üìã Problemas identificados na fun√ß√£o atual:")
    print("   1. L√≥gica de verifica√ß√£o de wapi_result incorreta")
    print("   2. Estrutura de pastas hardcoded por ID do cliente")
    print("   3. Falta de logs detalhados")
    
    # Nova fun√ß√£o corrigida
    nova_funcao = '''def process_media_automatically(webhook_data, cliente, instance):
    """Processa m√≠dias automaticamente quando recebidas via webhook - VERS√ÉO CORRIGIDA"""
    try:
        print(f"üîÑ INICIANDO DOWNLOAD AUTOM√ÅTICO - Cliente: {cliente.nome}")
        
        msg_content = webhook_data.get('msgContent', {})
        message_id = webhook_data.get('messageId')
        
        # Detectar tipo de m√≠dia
        media_types = {
            'imageMessage': 'image',
            'videoMessage': 'video', 
            'audioMessage': 'audio',
            'documentMessage': 'document',
            'stickerMessage': 'sticker'
        }
        
        detected_media = None
        media_type = None
        
        for content_key, media_type_name in media_types.items():
            if content_key in msg_content:
                detected_media = msg_content[content_key]
                media_type = media_type_name
                break
        
        if not detected_media:
            print(f"‚ùå Nenhuma m√≠dia detectada no webhook")
            return False
        
        print(f"üìé M√≠dia detectada: {media_type}")
        print(f"üìã Dados da m√≠dia: {list(detected_media.keys())}")
        
        # Extrair dados necess√°rios para download
        media_key = detected_media.get('mediaKey', '')
        direct_path = detected_media.get('directPath', '')
        mimetype = detected_media.get('mimetype', '')
        
        # Dados do remetente
        sender = webhook_data.get('sender', {})
        sender_name = sender.get('pushName', 'Desconhecido')
        
        # LOGS DETALHADOS PARA DEBUG
        print(f"üîç Verificando dados para download:")
        print(f"   mediaKey: {'‚úÖ' if media_key else '‚ùå'} {media_key[:20] if media_key else 'AUSENTE'}...")
        print(f"   directPath: {'‚úÖ' if direct_path else '‚ùå'} {direct_path[:50] if direct_path else 'AUSENTE'}...")
        print(f"   mimetype: {'‚úÖ' if mimetype else '‚ùå'} {mimetype}")
        
        # Fazer download da m√≠dia
        if media_key and direct_path and mimetype:
            print(f"üîÑ Iniciando download da m√≠dia...")
            
            # Preparar dados para W-API
            media_data = {
                'mediaKey': media_key,
                'directPath': direct_path,
                'type': media_type,
                'mimetype': mimetype
            }
            
            print(f"üì° Chamando download_media_via_wapi...")
            
            # Fazer download via W-API (FUN√á√ÉO CORRIGIDA)
            file_path = download_media_via_wapi(
                instance.instance_id,
                instance.token,
                media_data
            )
            
            print(f"üìã Resultado do download_media_via_wapi: {type(file_path)} - {file_path}")
            
            # CORRE√á√ÉO: A fun√ß√£o agora retorna diretamente o caminho do arquivo
            if file_path and isinstance(file_path, str) and os.path.exists(file_path):
                print(f"‚úÖ M√≠dia processada com sucesso!")
                print(f"üìÅ Arquivo salvo: {file_path}")
                
                # Mover para estrutura correta por nome do cliente
                new_file_path = reorganizar_arquivo_por_cliente(file_path, cliente, instance, media_type, webhook_data)
                
                if new_file_path:
                    print(f"üìÇ Arquivo reorganizado: {new_file_path}")
                    return True
                else:
                    print(f"‚ö†Ô∏è Arquivo baixado mas n√£o reorganizado")
                    return True
            else:
                print(f"‚ùå Falha no download via W-API: {file_path}")
                return False
        else:
            print(f"‚ö†Ô∏è Dados insuficientes para download:")
            print(f"   mediaKey: {'‚úÖ' if media_key else '‚ùå'}")
            print(f"   directPath: {'‚úÖ' if direct_path else '‚ùå'}")
            print(f"   mimetype: {'‚úÖ' if mimetype else '‚ùå'}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao processar m√≠dia automaticamente: {e}")
        import traceback
        traceback.print_exc()
        return False


def reorganizar_arquivo_por_cliente(file_path, cliente, instance, media_type, webhook_data):
    """Reorganiza arquivo na estrutura correta por nome do cliente"""
    try:
        from pathlib import Path
        import shutil
        
        # Extrair chat_id do webhook
        chat = webhook_data.get('chat', {})
        chat_id = chat.get('id', 'unknown')
        
        # Normalizar chat_id
        chat_id = normalize_chat_id(chat_id)
        
        # Nome do cliente (remover caracteres especiais)
        cliente_nome = "".join(c for c in cliente.nome if c.isalnum() or c in (' ', '-', '_')).strip()
        cliente_nome = cliente_nome.replace(' ', '_')
        
        # Nova estrutura: media_storage/NOME_CLIENTE/instance_ID/chats/CHAT_ID/TIPO_MIDIA/
        nova_estrutura = Path(__file__).parent / "multichat_system" / "media_storage" / cliente_nome / f"instance_{instance.instance_id}" / "chats" / str(chat_id) / media_type
        nova_estrutura.mkdir(parents=True, exist_ok=True)
        
        # Nome do arquivo
        arquivo_original = Path(file_path)
        novo_caminho = nova_estrutura / arquivo_original.name
        
        # Mover arquivo
        shutil.move(str(arquivo_original), str(novo_caminho))
        
        print(f"üìÇ Estrutura criada: {cliente_nome}/instance_{instance.instance_id}/chats/{chat_id}/{media_type}/")
        
        return str(novo_caminho)
        
    except Exception as e:
        print(f"‚ùå Erro ao reorganizar arquivo: {e}")
        return None'''
    
    # Substituir fun√ß√£o no arquivo
    # Encontrar in√≠cio e fim da fun√ß√£o atual
    inicio_funcao = content.find("def process_media_automatically(webhook_data, cliente, instance):")
    
    if inicio_funcao == -1:
        print("‚ùå Fun√ß√£o process_media_automatically n√£o encontrada")
        return False
    
    # Encontrar pr√≥xima fun√ß√£o para saber onde termina
    fim_funcao = content.find("\ndef ", inicio_funcao + 1)
    
    if fim_funcao == -1:
        fim_funcao = len(content)
    
    # Substituir fun√ß√£o
    novo_content = content[:inicio_funcao] + nova_funcao + "\n\n" + content[fim_funcao:]
    
    # Salvar arquivo
    with open(arquivo_views, 'w', encoding='utf-8') as f:
        f.write(novo_content)
    
    print("‚úÖ Fun√ß√£o process_media_automatically corrigida!")
    return True

def adicionar_funcao_reorganizar():
    """Adiciona fun√ß√£o para reorganizar arquivos por nome do cliente"""
    print(f"\nüîß ADICIONANDO FUN√á√ÉO DE REORGANIZA√á√ÉO")
    print("=" * 80)
    
    arquivo_views = "multichat_system/webhook/views.py"
    
    funcao_reorganizar = '''
def reorganizar_arquivo_por_cliente(file_path, cliente, instance, media_type, webhook_data):
    """Reorganiza arquivo na estrutura correta por nome do cliente"""
    try:
        from pathlib import Path
        import shutil
        
        # Extrair chat_id do webhook
        chat = webhook_data.get('chat', {})
        chat_id = chat.get('id', 'unknown')
        
        # Normalizar chat_id
        chat_id = normalize_chat_id(chat_id)
        
        # Nome do cliente (remover caracteres especiais)
        cliente_nome = "".join(c for c in cliente.nome if c.isalnum() or c in (' ', '-', '_')).strip()
        cliente_nome = cliente_nome.replace(' ', '_')
        
        # Nova estrutura: media_storage/NOME_CLIENTE/instance_ID/chats/CHAT_ID/TIPO_MIDIA/
        nova_estrutura = Path(__file__).parent.parent / "media_storage" / cliente_nome / f"instance_{instance.instance_id}" / "chats" / str(chat_id) / media_type
        nova_estrutura.mkdir(parents=True, exist_ok=True)
        
        # Nome do arquivo
        arquivo_original = Path(file_path)
        novo_caminho = nova_estrutura / arquivo_original.name
        
        # Mover arquivo se n√£o for o mesmo local
        if str(arquivo_original) != str(novo_caminho):
            shutil.move(str(arquivo_original), str(novo_caminho))
            print(f"üìÇ Arquivo movido para estrutura correta: {cliente_nome}/instance_{instance.instance_id}/chats/{chat_id}/{media_type}/")
        
        return str(novo_caminho)
        
    except Exception as e:
        print(f"‚ùå Erro ao reorganizar arquivo: {e}")
        import traceback
        traceback.print_exc()
        return file_path  # Retornar caminho original se falhar
'''
    
    # Adicionar fun√ß√£o ao final do arquivo
    with open(arquivo_views, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verificar se fun√ß√£o j√° existe
    if "def reorganizar_arquivo_por_cliente" in content:
        print("‚úÖ Fun√ß√£o reorganizar_arquivo_por_cliente j√° existe")
        return True
    
    # Adicionar no final
    content += funcao_reorganizar
    
    with open(arquivo_views, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Fun√ß√£o reorganizar_arquivo_por_cliente adicionada!")
    return True

def testar_estrutura_nova():
    """Testa a nova estrutura de pastas"""
    print(f"\nüß™ TESTANDO NOVA ESTRUTURA DE PASTAS")
    print("=" * 80)
    
    from core.models import Cliente, WhatsappInstance
    
    # Obter cliente
    cliente = Cliente.objects.first()
    instance = WhatsappInstance.objects.first()
    
    if not cliente or not instance:
        print("‚ùå Cliente ou inst√¢ncia n√£o encontrados")
        return False
    
    # Nome do cliente normalizado
    cliente_nome = "".join(c for c in cliente.nome if c.isalnum() or c in (' ', '-', '_')).strip()
    cliente_nome = cliente_nome.replace(' ', '_')
    
    print(f"üë§ Cliente: {cliente.nome}")
    print(f"üìù Nome normalizado: {cliente_nome}")
    print(f"üì± Inst√¢ncia: {instance.instance_id}")
    
    # Estrutura esperada
    estrutura_base = Path("multichat_system/media_storage") / cliente_nome / f"instance_{instance.instance_id}" / "chats"
    
    print(f"üìÇ Estrutura base: {estrutura_base}")
    
    # Criar estrutura de exemplo
    for chat_id in ["556999267344", "556999211347"]:
        for media_type in ["audio", "imagens", "videos", "documentos"]:
            pasta = estrutura_base / chat_id / media_type
            pasta.mkdir(parents=True, exist_ok=True)
            print(f"   ‚úÖ {chat_id}/{media_type}/")
    
    print(f"‚úÖ Estrutura de teste criada!")
    return True

def executar_correcao_completa():
    """Executa corre√ß√£o completa do download autom√°tico"""
    print("üîß CORRE√á√ÉO COMPLETA - DOWNLOAD AUTOM√ÅTICO WEBHOOK REAL")
    print("=" * 80)
    
    # 1. Diagnosticar problema
    diagnosticar_problema_webhook()
    
    # 2. Corrigir fun√ß√£o principal
    if corrigir_process_media_automatically():
        print("‚úÖ Fun√ß√£o principal corrigida")
    else:
        print("‚ùå Falha ao corrigir fun√ß√£o principal")
        return False
    
    # 3. Adicionar fun√ß√£o de reorganiza√ß√£o
    if adicionar_funcao_reorganizar():
        print("‚úÖ Fun√ß√£o de reorganiza√ß√£o adicionada")
    else:
        print("‚ùå Falha ao adicionar fun√ß√£o de reorganiza√ß√£o")
        return False
    
    # 4. Testar estrutura
    if testar_estrutura_nova():
        print("‚úÖ Estrutura de teste criada")
    else:
        print("‚ùå Falha ao criar estrutura de teste")
    
    # 5. Gerar relat√≥rio final
    gerar_relatorio_final()
    
    return True

def gerar_relatorio_final():
    """Gera relat√≥rio final das corre√ß√µes"""
    print(f"\n" + "=" * 80)
    print("üìä RELAT√ìRIO FINAL - CORRE√á√ïES APLICADAS")
    print("=" * 80)
    
    print(f"‚úÖ PROBLEMAS CORRIGIDOS:")
    print(f"   1. process_media_automatically() agora funciona corretamente")
    print(f"   2. Logs detalhados adicionados para debug")
    print(f"   3. Compatibilidade com download_media_via_wapi corrigida")
    print(f"   4. Estrutura de pastas por NOME do cliente implementada")
    print(f"   5. Organiza√ß√£o por chats e tipos de m√≠dia")
    
    print(f"\nüìÇ NOVA ESTRUTURA DE PASTAS:")
    print(f"   media_storage/")
    print(f"   ‚îî‚îÄ‚îÄ NOME_DO_CLIENTE/")
    print(f"       ‚îî‚îÄ‚îÄ instance_INSTANCE_ID/")
    print(f"           ‚îî‚îÄ‚îÄ chats/")
    print(f"               ‚îî‚îÄ‚îÄ CHAT_ID/")
    print(f"                   ‚îú‚îÄ‚îÄ audio/")
    print(f"                   ‚îú‚îÄ‚îÄ imagens/")
    print(f"                   ‚îú‚îÄ‚îÄ videos/")
    print(f"                   ‚îî‚îÄ‚îÄ documentos/")
    
    print(f"\nüéØ PR√ìXIMOS PASSOS:")
    print(f"   1. ‚úÖ Reiniciar o servidor Django")
    print(f"   2. ‚úÖ Enviar nova mensagem de √°udio/m√≠dia")
    print(f"   3. ‚úÖ Verificar logs de download autom√°tico")
    print(f"   4. ‚úÖ Confirmar estrutura de pastas")
    
    print(f"\nüí° AGORA O DOWNLOAD AUTOM√ÅTICO DEVE FUNCIONAR!")

if __name__ == "__main__":
    executar_correcao_completa() 