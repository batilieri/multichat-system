// Diagn√≥stico de problemas com tokens e inst√¢ncias
console.log('üîç Diagnosticando problemas com tokens e inst√¢ncias...')

// Verificar localStorage
function verificarLocalStorage() {
  console.log('\nüìã Verificando localStorage:')
  
  // Verificar wapi_instances
  const wapiInstances = localStorage.getItem('wapi_instances')
  console.log('üîë wapi_instances:', wapiInstances)
  
  if (wapiInstances) {
    try {
      const parsed = JSON.parse(wapiInstances)
      console.log('‚úÖ wapi_instances parseado:', parsed)
      console.log('üìä N√∫mero de inst√¢ncias:', Object.keys(parsed).length)
      
      Object.keys(parsed).forEach(instanceId => {
        const instance = parsed[instanceId]
        console.log(`  - Inst√¢ncia ${instanceId}:`, {
          token: instance.token ? `${instance.token.substring(0, 8)}...` : 'NENHUM',
          hasToken: !!instance.token
        })
      })
    } catch (error) {
      console.error('‚ùå Erro ao fazer parse de wapi_instances:', error)
    }
  } else {
    console.log('‚ùå wapi_instances n√£o encontrado no localStorage')
  }
  
  // Verificar access_token
  const accessToken = localStorage.getItem('access_token')
  console.log('üîê access_token:', accessToken ? `${accessToken.substring(0, 8)}...` : 'NENHUM')
  
  // Verificar user
  const user = localStorage.getItem('user')
  console.log('üë§ user:', user ? 'ENCONTRADO' : 'NENHUM')
}

// Simular o processo de busca de inst√¢ncia e token
function simularBuscaInstancia() {
  console.log('\nüîÑ Simulando busca de inst√¢ncia e token:')
  
  const wapiInstances = JSON.parse(localStorage.getItem('wapi_instances') || '{}')
  const instanciaId = Object.keys(wapiInstances)[0]
  const token = instanciaId ? wapiInstances[instanciaId].token : null
  
  console.log('üîç Inst√¢ncia encontrada:', instanciaId || 'NENHUMA')
  console.log('üîë Token encontrado:', token ? 'SIM' : 'N√ÉO')
  
  if (!instanciaId || !token) {
    console.log('‚ùå PROBLEMA: Inst√¢ncia ou token n√£o encontrados')
    console.log('üí° Solu√ß√£o: Conectar uma inst√¢ncia no painel de administra√ß√£o')
  } else {
    console.log('‚úÖ Tudo OK: Inst√¢ncia e token encontrados')
  }
}

// Verificar se h√° problemas com as altera√ß√µes recentes
function verificarAlteracoesRecentes() {
  console.log('\nüîç Verificando se h√° problemas com altera√ß√µes recentes:')
  
  // Verificar se o localStorage foi limpo acidentalmente
  const allKeys = Object.keys(localStorage)
  console.log('üìã Todas as chaves no localStorage:', allKeys)
  
  // Verificar se h√° chaves relacionadas ao sistema
  const systemKeys = allKeys.filter(key => 
    key.includes('wapi') || 
    key.includes('token') || 
    key.includes('user') || 
    key.includes('auth')
  )
  console.log('üîß Chaves do sistema:', systemKeys)
}

// Executar diagn√≥stico
verificarLocalStorage()
simularBuscaInstancia()
verificarAlteracoesRecentes()

console.log('\n‚úÖ Diagn√≥stico conclu√≠do!')

console.log(`
üìã POSS√çVEIS SOLU√á√ïES:
1. Se wapi_instances estiver vazio:
   - Acesse o painel de administra√ß√£o
   - Conecte uma inst√¢ncia do WhatsApp
   - Verifique se o token foi salvo

2. Se access_token estiver ausente:
   - Fa√ßa login novamente
   - Verifique se a sess√£o n√£o expirou

3. Se houver erro de parse:
   - Limpe o localStorage: localStorage.clear()
   - Fa√ßa login novamente
   - Reconecte as inst√¢ncias

4. Se tudo estiver OK mas ainda n√£o funcionar:
   - Verifique se o backend est√° rodando
   - Verifique se a API est√° acess√≠vel
`) 