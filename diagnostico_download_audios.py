#!/usr/bin/env python3
"""
Diagn√≥stico do Sistema de Download Autom√°tico de √Åudios
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'multichat_system.multichat.settings')
django.setup()

from core.models import Cliente, Chat, Mensagem
from webhook.models import WebhookEvent
import json
from pathlib import Path

def verificar_configuracao_cliente():
    """Verifica a configura√ß√£o do cliente"""
    print("üîß VERIFICANDO CONFIGURA√á√ÉO DO CLIENTE")
    print("=" * 60)
    
    cliente = Cliente.objects.first()
    if not cliente:
        print("‚ùå Nenhum cliente encontrado!")
        return False
    
    print(f"‚úÖ Cliente encontrado: {cliente.nome}")
    print(f"   ID: {cliente.id}")
    print(f"   Status: {cliente.status}")
    print(f"   WAPI Instance ID: {cliente.wapi_instance_id}")
    print(f"   WAPI Token: {cliente.wapi_token[:20] if cliente.wapi_token else 'Nenhum'}...")
    
    # Verificar se tem configura√ß√£o completa
    if not cliente.wapi_token or not cliente.wapi_instance_id:
        print("‚ùå Configura√ß√£o W-API incompleta!")
        return False
    
    print("‚úÖ Configura√ß√£o W-API completa")
    return True

def verificar_mensagens_audio():
    """Verifica mensagens de √°udio no banco"""
    print("\nüéµ VERIFICANDO MENSAGENS DE √ÅUDIO")
    print("=" * 60)
    
    # Buscar mensagens de √°udio
    audio_messages = Mensagem.objects.filter(tipo='audio')
    print(f"üìä Total de mensagens de √°udio: {audio_messages.count()}")
    
    if audio_messages.count() == 0:
        print("‚ö†Ô∏è Nenhuma mensagem de √°udio encontrada")
        return
    
    # Analisar algumas mensagens
    for msg in audio_messages[:3]:
        print(f"\nüéµ Mensagem ID: {msg.id}")
        print(f"   Chat: {msg.chat.chat_id}")
        print(f"   Remetente: {msg.remetente}")
        print(f"   Data: {msg.data_envio}")
        print(f"   Conte√∫do: {msg.conteudo[:100]}...")
        
        # Verificar dados do √°udio
        try:
            json_data = json.loads(msg.conteudo)
            if 'audioMessage' in json_data:
                audio_data = json_data['audioMessage']
                print(f"   ‚úÖ Dados do √°udio:")
                print(f"      URL: {audio_data.get('url', 'N/A')}")
                print(f"      MediaKey: {audio_data.get('mediaKey', 'N/A')}")
                print(f"      DirectPath: {audio_data.get('directPath', 'N/A')}")
                print(f"      Mimetype: {audio_data.get('mimetype', 'N/A')}")
            else:
                print(f"   ‚ö†Ô∏è N√£o cont√©m audioMessage")
        except:
            print(f"   ‚ùå Erro ao processar JSON")

def verificar_webhooks_recentes():
    """Verifica webhooks recentes"""
    print("\nüì° VERIFICANDO WEBHOOKS RECENTES")
    print("=" * 60)
    
    # Buscar webhooks recentes
    webhooks = WebhookEvent.objects.all().order_by('-timestamp')[:5]
    print(f"üìä Webhooks recentes: {webhooks.count()}")
    
    for webhook in webhooks:
        print(f"\nüì° Webhook ID: {webhook.id}")
        print(f"   Tipo: {webhook.event_type}")
        print(f"   Data: {webhook.timestamp}")
        print(f"   Dados: {webhook.raw_data[:100]}...")
        
        # Verificar se cont√©m √°udio
        try:
            data = json.loads(webhook.raw_data)
            if 'msgContent' in data:
                msg_content = data['msgContent']
                if 'audioMessage' in msg_content:
                    print(f"   üéµ CONT√âM √ÅUDIO!")
                    audio_data = msg_content['audioMessage']
                    print(f"      URL: {audio_data.get('url', 'N/A')}")
                    print(f"      MediaKey: {audio_data.get('mediaKey', 'N/A')}")
                else:
                    print(f"   ‚ö†Ô∏è N√£o cont√©m √°udio")
        except:
            print(f"   ‚ùå Erro ao processar dados")

def verificar_estrutura_pastas():
    """Verifica a estrutura de pastas de m√≠dia"""
    print("\nüìÅ VERIFICANDO ESTRUTURA DE PASTAS")
    print("=" * 60)
    
    # Verificar pasta de m√≠dia
    media_path = Path("multichat_system/media_storage")
    if not media_path.exists():
        print("‚ùå Pasta media_storage n√£o encontrada!")
        return
    
    print(f"‚úÖ Pasta media_storage encontrada")
    
    # Verificar estrutura de clientes
    for cliente_dir in media_path.glob("cliente_*"):
        print(f"\nüë§ Cliente: {cliente_dir.name}")
        
        # Verificar inst√¢ncias
        for instance_dir in cliente_dir.glob("instance_*"):
            print(f"   üì± Inst√¢ncia: {instance_dir.name}")
            
            # Verificar tipos de m√≠dia
            for media_type in ['audio', 'imagens', 'videos', 'documentos']:
                media_dir = instance_dir / media_type
                if media_dir.exists():
                    files = list(media_dir.glob("*"))
                    print(f"      {media_type}: {len(files)} arquivos")
                else:
                    print(f"      {media_type}: pasta n√£o existe")

def testar_download_automatico():
    """Testa o download autom√°tico"""
    print("\nüß™ TESTANDO DOWNLOAD AUTOM√ÅTICO")
    print("=" * 60)
    
    # Buscar uma mensagem de √°udio para teste
    audio_message = Mensagem.objects.filter(tipo='audio').first()
    if not audio_message:
        print("‚ùå Nenhuma mensagem de √°udio para testar")
        return
    
    print(f"üéµ Testando com mensagem ID: {audio_message.id}")
    
    try:
        # Extrair dados do √°udio
        json_data = json.loads(audio_message.conteudo)
        if 'audioMessage' in json_data:
            audio_data = json_data['audioMessage']
            
            # Verificar campos necess√°rios
            campos_necessarios = ['mediaKey', 'directPath', 'mimetype']
            campos_presentes = []
            
            for campo in campos_necessarios:
                if audio_data.get(campo):
                    campos_presentes.append(campo)
                    print(f"   ‚úÖ {campo}: {audio_data[campo][:20]}...")
                else:
                    print(f"   ‚ùå {campo}: ausente")
            
            if len(campos_presentes) == len(campos_necessarios):
                print("‚úÖ Todos os campos necess√°rios est√£o presentes!")
                print("üí° O download autom√°tico deve funcionar")
            else:
                print("‚ùå Campos necess√°rios ausentes!")
                print("üí° Isso pode estar impedindo o download autom√°tico")
        else:
            print("‚ùå N√£o cont√©m dados de √°udio v√°lidos")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üîç DIAGN√ìSTICO DO SISTEMA DE DOWNLOAD AUTOM√ÅTICO DE √ÅUDIOS")
    print("=" * 80)
    
    try:
        # Verificar configura√ß√£o
        config_ok = verificar_configuracao_cliente()
        
        # Verificar mensagens
        verificar_mensagens_audio()
        
        # Verificar webhooks
        verificar_webhooks_recentes()
        
        # Verificar estrutura
        verificar_estrutura_pastas()
        
        # Testar download
        testar_download_automatico()
        
        print("\n" + "=" * 80)
        print("‚úÖ DIAGN√ìSTICO CONCLU√çDO!")
        
        if config_ok:
            print("üí° SUGEST√ïES:")
            print("   1. Verifique se os webhooks est√£o chegando")
            print("   2. Confirme se as credenciais W-API est√£o corretas")
            print("   3. Teste enviando um √°udio real no WhatsApp")
            print("   4. Verifique os logs do Django para erros")
        else:
            print("‚ùå PROBLEMAS ENCONTRADOS:")
            print("   1. Configure o cliente com W-API Token e Instance ID")
            print("   2. Verifique se a inst√¢ncia est√° conectada")
            print("   3. Teste a conex√£o com a API W-API")
        
    except Exception as e:
        print(f"‚ùå Erro no diagn√≥stico: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 