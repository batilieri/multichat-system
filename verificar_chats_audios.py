#!/usr/bin/env python3
"""
Verifica√ß√£o completa de todos os chats e suas mensagens de √°udio
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'multichat_system.multichat.settings')
django.setup()

from core.models import Cliente, Chat, Mensagem
import json
from pathlib import Path

def verificar_todos_chats():
    """Verifica todos os chats e suas mensagens de √°udio"""
    print("üîç VERIFICANDO TODOS OS CHATS")
    print("=" * 60)
    
    # Buscar todos os chats
    chats = Chat.objects.all()
    print(f"üìä Total de chats encontrados: {chats.count()}")
    
    for chat in chats:
        print(f"\nüì± Chat ID: {chat.chat_id}")
        print(f"   Nome: {chat.chat_name}")
        print(f"   Cliente: {chat.cliente.nome}")
        print(f"   Status: {chat.status}")
        print(f"   √öltima mensagem: {chat.last_message_at}")
        
        # Contar mensagens por tipo
        mensagens = chat.mensagens.all()
        print(f"   Total de mensagens: {mensagens.count()}")
        
        # Contar mensagens de √°udio
        audio_messages = mensagens.filter(tipo='audio')
        print(f"   Mensagens de √°udio: {audio_messages.count()}")
        
        if audio_messages.count() > 0:
            print(f"   üéµ √ÅUDIOS ENCONTRADOS!")
            for msg in audio_messages[:3]:  # Mostrar primeiros 3
                print(f"      - ID: {msg.id}, Data: {msg.data_envio}")
                try:
                    json_data = json.loads(msg.conteudo)
                    if 'audioMessage' in json_data:
                        audio_data = json_data['audioMessage']
                        print(f"        URL: {audio_data.get('url', 'N/A')}")
                        print(f"        MediaKey: {audio_data.get('mediaKey', 'N/A')}")
                except:
                    print(f"        ‚ö†Ô∏è Erro ao processar JSON")
        else:
            print(f"   ‚ö†Ô∏è Nenhuma mensagem de √°udio encontrada")

def verificar_pastas_audio():
    """Verifica as pastas de √°udio de todos os chats"""
    print("\nüìÅ VERIFICANDO PASTAS DE √ÅUDIO")
    print("=" * 60)
    
    media_path = Path("multichat_system/media_storage/cliente_2/instance_3B6XIW-ZTS923-GEAY6V/chats")
    
    if not media_path.exists():
        print("‚ùå Pasta de chats n√£o encontrada!")
        return
    
    # Verificar cada chat
    for chat_dir in media_path.glob("*"):
        if chat_dir.is_dir():
            print(f"\nüì± Chat: {chat_dir.name}")
            
            # Verificar pasta de √°udio
            audio_dir = chat_dir / "audio"
            if audio_dir.exists():
                files = list(audio_dir.glob("*"))
                print(f"   üéµ √Åudios encontrados: {len(files)}")
                for file in files:
                    size_kb = file.stat().st_size / 1024
                    print(f"      - {file.name} ({size_kb:.1f} KB)")
            else:
                print(f"   ‚ö†Ô∏è Pasta de √°udio n√£o existe")

def verificar_mensagens_audio_banco():
    """Verifica mensagens de √°udio no banco de dados"""
    print("\nüóÑÔ∏è VERIFICANDO MENSAGENS DE √ÅUDIO NO BANCO")
    print("=" * 60)
    
    # Buscar todas as mensagens de √°udio
    audio_messages = Mensagem.objects.filter(tipo='audio')
    print(f"üìä Total de mensagens de √°udio no banco: {audio_messages.count()}")
    
    if audio_messages.count() == 0:
        print("‚ùå Nenhuma mensagem de √°udio encontrada no banco!")
        return
    
    # Agrupar por chat
    chats_com_audio = {}
    for msg in audio_messages:
        chat_id = msg.chat.chat_id
        if chat_id not in chats_com_audio:
            chats_com_audio[chat_id] = []
        chats_com_audio[chat_id].append(msg)
    
    print(f"üì± Chats com √°udio: {len(chats_com_audio)}")
    
    for chat_id, messages in chats_com_audio.items():
        print(f"\nüéµ Chat {chat_id}: {len(messages)} √°udios")
        for msg in messages:
            print(f"   - ID: {msg.id}, Data: {msg.data_envio}")
            try:
                json_data = json.loads(msg.conteudo)
                if 'audioMessage' in json_data:
                    audio_data = json_data['audioMessage']
                    print(f"     URL: {audio_data.get('url', 'N/A')}")
                    print(f"     MediaKey: {audio_data.get('mediaKey', 'N/A')}")
            except:
                print(f"     ‚ö†Ô∏è Erro ao processar JSON")

def verificar_webhooks_audio():
    """Verifica webhooks que cont√™m √°udio"""
    print("\nüì° VERIFICANDO WEBHOOKS COM √ÅUDIO")
    print("=" * 60)
    
    try:
        from webhook.models import WebhookEvent
        
        # Buscar webhooks recentes
        webhooks = WebhookEvent.objects.all().order_by('-timestamp')[:20]
        print(f"üìä Webhooks analisados: {webhooks.count()}")
        
        webhooks_com_audio = 0
        for webhook in webhooks:
            try:
                data = json.loads(webhook.raw_data)
                if 'msgContent' in data:
                    msg_content = data['msgContent']
                    if 'audioMessage' in msg_content:
                        webhooks_com_audio += 1
                        print(f"   üéµ Webhook ID {webhook.id}: CONT√âM √ÅUDIO")
                        audio_data = msg_content['audioMessage']
                        print(f"      URL: {audio_data.get('url', 'N/A')}")
                        print(f"      MediaKey: {audio_data.get('mediaKey', 'N/A')}")
            except:
                continue
        
        print(f"\nüìä Total de webhooks com √°udio: {webhooks_com_audio}")
        
    except ImportError:
        print("‚ùå Modelo WebhookEvent n√£o encontrado")

def main():
    """Fun√ß√£o principal"""
    print("üîç VERIFICA√á√ÉO COMPLETA DE CHATS E √ÅUDIOS")
    print("=" * 80)
    
    try:
        # Verificar todos os chats
        verificar_todos_chats()
        
        # Verificar pastas de √°udio
        verificar_pastas_audio()
        
        # Verificar mensagens no banco
        verificar_mensagens_audio_banco()
        
        # Verificar webhooks
        verificar_webhooks_audio()
        
        print("\n" + "=" * 80)
        print("‚úÖ VERIFICA√á√ÉO CONCLU√çDA!")
        
        print("\nüí° AN√ÅLISE:")
        print("   - Verificar se h√° mensagens de √°udio no banco")
        print("   - Confirmar se webhooks est√£o chegando")
        print("   - Verificar se download autom√°tico est√° ativo")
        print("   - Testar com √°udios reais no WhatsApp")
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 