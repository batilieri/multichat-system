#!/usr/bin/env python3
"""
üéµ ATUALIZADOR AUTOM√ÅTICO DE CHATS COM √ÅUDIOS
Mapeia automaticamente √°udios j√° baixados com chats existentes
"""

import os
import sys
import django
from pathlib import Path
import json
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'multichat_system.multichat.settings')
sys.path.append('multichat_system')
django.setup()

def analisar_estrutura_audios():
    """Analisa a estrutura de √°udios armazenados"""
    print("üîç ANALISANDO ESTRUTURA DE √ÅUDIOS")
    print("=" * 60)
    
    base_path = Path("multichat_system/media_storage/Elizeu_Batiliere_Dos_Santos/instance_3B6XIW-ZTS923-GEAY6V/chats")
    
    if not base_path.exists():
        print("‚ùå Diret√≥rio base n√£o encontrado")
        return {}
    
    estrutura_audios = {}
    
    # Percorrer todos os chats
    for chat_dir in base_path.iterdir():
        if chat_dir.is_dir():
            chat_id = chat_dir.name
            audio_dir = chat_dir / "audio"
            
            if audio_dir.exists():
                audio_files = list(audio_dir.glob("*.ogg")) + list(audio_dir.glob("*.mp3")) + list(audio_dir.glob("*.m4a"))
                
                if audio_files:
                    estrutura_audios[chat_id] = {
                        'path': str(audio_dir),
                        'files': []
                    }
                    
                    for audio_file in audio_files:
                        file_info = {
                            'name': audio_file.name,
                            'size': audio_file.stat().st_size,
                            'modified': datetime.fromtimestamp(audio_file.stat().st_mtime),
                            'full_path': str(audio_file)
                        }
                        
                        # Extrair informa√ß√µes do nome do arquivo
                        if "msg_" in audio_file.name:
                            parts = audio_file.name.replace(".ogg", "").replace(".mp3", "").replace(".m4a", "").split("_")
                            if len(parts) >= 3:
                                file_info['hash'] = parts[1]
                                file_info['timestamp'] = parts[2]
                        
                        estrutura_audios[chat_id]['files'].append(file_info)
                        
                        print(f"   üìÅ Chat {chat_id}: {audio_file.name} ({file_info['size']} bytes)")
    
    print(f"\n‚úÖ Total de chats com √°udios: {len(estrutura_audios)}")
    return estrutura_audios

def buscar_chats_existentes():
    """Busca chats existentes no banco de dados"""
    print("\nüì± BUSCANDO CHATS EXISTENTES NO BANCO")
    print("=" * 60)
    
    from core.models import Chat
    
    chats = Chat.objects.all()
    print(f"‚úÖ {chats.count()} chats encontrados no banco")
    
    chats_info = {}
    for chat in chats:
        # Contar mensagens de √°udio manualmente
        mensagens_audio_count = chat.mensagens.filter(tipo='audio').count()
        
        chats_info[chat.chat_id] = {
            'id': chat.id,
            'chat_name': chat.chat_name,
            'cliente': chat.cliente.nome,
            'mensagens_count': chat.mensagens.count(),
            'mensagens_audio': mensagens_audio_count
        }
        
        print(f"   üì± Chat {chat.chat_id}: {chat.chat_name or 'Sem nome'} ({mensagens_audio_count} √°udios)")
    
    return chats_info

def mapear_audios_com_chats(estrutura_audios, chats_info):
    """Mapeia √°udios com chats baseado em diferentes estrat√©gias"""
    print("\nüîó MAPEANDO √ÅUDIOS COM CHATS")
    print("=" * 60)
    
    mapeamentos = {}
    
    for chat_id, audio_info in estrutura_audios.items():
        print(f"\nüîç Analisando chat {chat_id}:")
        
        if chat_id in chats_info:
            chat_db = chats_info[chat_id]
            print(f"   ‚úÖ Chat encontrado no banco: {chat_db['chat_name'] or chat_id}")
            print(f"   üìä Mensagens: {chat_db['mensagens_count']} total, {chat_db['mensagens_audio']} √°udios")
            
            # Estrat√©gia 1: Buscar mensagens de √°udio existentes
            from core.models import Mensagem
            mensagens_audio = Mensagem.objects.filter(chat__chat_id=chat_id, tipo='audio')
            
            if mensagens_audio.exists():
                print(f"   üéµ {mensagens_audio.count()} mensagens de √°udio encontradas")
                
                # Mapear arquivos com mensagens baseado em timestamp
                for audio_file in audio_info['files']:
                    if 'timestamp' in audio_file:
                        # Buscar mensagem com timestamp pr√≥ximo
                        file_date = audio_file['modified'].date()
                        
                        # Buscar mensagens do mesmo dia
                        mensagens_mesmo_dia = mensagens_audio.filter(
                            data_envio__date=file_date
                        )
                        
                        if mensagens_mesmo_dia.exists():
                            # Usar a mensagem mais pr√≥xima do timestamp do arquivo
                            # Converter para timezone-aware se necess√°rio
                            from django.utils import timezone
                            
                            def get_timestamp_diff(mensagem):
                                msg_time = mensagem.data_envio
                                if timezone.is_naive(msg_time):
                                    msg_time = timezone.make_aware(msg_time)
                                
                                file_time = audio_file['modified']
                                if timezone.is_naive(file_time):
                                    file_time = timezone.make_aware(file_time)
                                
                                return abs((msg_time - file_time).total_seconds())
                            
                            mensagem_mais_proxima = min(
                                mensagens_mesmo_dia,
                                key=get_timestamp_diff
                            )
                            
                            mapeamentos[audio_file['full_path']] = {
                                'chat_id': chat_id,
                                'mensagem_id': mensagem_mais_proxima.id,
                                'message_id': mensagem_mais_proxima.message_id,
                                'timestamp_mensagem': mensagem_mais_proxima.data_envio,
                                'timestamp_arquivo': audio_file['modified'],
                                'estrategia': 'timestamp_proximo'
                            }
                            
                            print(f"      üéØ Arquivo {audio_file['name']} ‚Üí Mensagem ID {mensagem_mais_proxima.id}")
                        else:
                            print(f"      ‚ö†Ô∏è Arquivo {audio_file['name']}: nenhuma mensagem do mesmo dia")
            else:
                print(f"   ‚ö†Ô∏è Nenhuma mensagem de √°udio encontrada para este chat")
                
                # Estrat√©gia 2: Criar mensagem de √°udio para arquivo n√£o mapeado
                for audio_file in audio_info['files']:
                    print(f"      üîÑ Criando mensagem para arquivo {audio_file['name']}")
                    
                    # Criar mensagem de √°udio
                    nova_mensagem = Mensagem.objects.create(
                        chat_id=chat_db['id'],
                        remetente="Sistema",
                        conteudo=json.dumps({
                            "audioMessage": {
                                "url": f"/media/whatsapp_media/{chat_id}/audio/{audio_file['name']}",
                                "fileName": audio_file['name'],
                                "fileSize": audio_file['size'],
                                "timestamp": audio_file['modified'].isoformat(),
                                "mimetype": "audio/ogg" if audio_file['name'].endswith('.ogg') else "audio/mpeg"
                            }
                        }),
                        tipo='audio',
                        lida=False,
                        from_me=False,
                        message_id=f"auto_{audio_file['hash']}_{int(audio_file['modified'].timestamp())}",
                        data_envio=audio_file['modified']
                    )
                    
                    mapeamentos[audio_file['full_path']] = {
                        'chat_id': chat_id,
                        'mensagem_id': nova_mensagem.id,
                        'message_id': nova_mensagem.message_id,
                        'timestamp_mensagem': nova_mensagem.data_envio,
                        'timestamp_arquivo': audio_file['modified'],
                        'estrategia': 'criada_automaticamente'
                    }
                    
                    print(f"         ‚úÖ Mensagem criada: ID {nova_mensagem.id}")
        else:
            print(f"   ‚ùå Chat {chat_id} n√£o encontrado no banco")
    
    return mapeamentos

def atualizar_urls_midias(mapeamentos):
    """Atualiza URLs de m√≠dia nas mensagens existentes"""
    print("\nüîó ATUALIZANDO URLS DE M√çDIA")
    print("=" * 60)
    
    from core.models import Mensagem
    
    atualizacoes = 0
    
    for arquivo_path, mapeamento in mapeamentos.items():
        try:
            mensagem = Mensagem.objects.get(id=mapeamento['mensagem_id'])
            
            # Verificar se j√° tem URL de m√≠dia
            if not mensagem.conteudo or not mensagem.conteudo.startswith('{'):
                continue
            
            try:
                conteudo_json = json.loads(mensagem.conteudo)
            except json.JSONDecodeError:
                continue
            
            # Atualizar ou adicionar URL de m√≠dia
            if 'audioMessage' in conteudo_json:
                audio_message = conteudo_json['audioMessage']
                
                # Adicionar URL local se n√£o existir
                if 'localPath' not in audio_message:
                    audio_message['localPath'] = arquivo_path
                    audio_message['localUrl'] = f"/api/audio/hash-mapping/{mensagem.id}/"
                    
                    # Atualizar mensagem
                    mensagem.conteudo = json.dumps(conteudo_json, ensure_ascii=False)
                    mensagem.save()
                    
                    atualizacoes += 1
                    print(f"   ‚úÖ Mensagem {mensagem.id} atualizada com URL local")
            
        except Mensagem.DoesNotExist:
            print(f"   ‚ùå Mensagem {mapeamento['mensagem_id']} n√£o encontrada")
        except Exception as e:
            print(f"   ‚ùå Erro ao atualizar mensagem {mapeamento['mensagem_id']}: {e}")
    
    print(f"\n‚úÖ Total de mensagens atualizadas: {atualizacoes}")
    return atualizacoes

def criar_relatorio_final(estrutura_audios, chats_info, mapeamentos):
    """Cria relat√≥rio final da opera√ß√£o"""
    print("\nüìä RELAT√ìRIO FINAL")
    print("=" * 80)
    
    total_arquivos = sum(len(info['files']) for info in estrutura_audios.values())
    total_mapeados = len(mapeamentos)
    
    print(f"üìÅ TOTAL DE ARQUIVOS DE √ÅUDIO: {total_arquivos}")
    print(f"üîó TOTAL MAPEADO: {total_mapeados}")
    print(f"üì± CHATS COM √ÅUDIOS: {len(estrutura_audios)}")
    print(f"üíæ CHATS NO BANCO: {len(chats_info)}")
    
    print(f"\nüéØ ESTRAT√âGIAS UTILIZADAS:")
    estrategias = {}
    for mapeamento in mapeamentos.values():
        estrategia = mapeamento['estrategia']
        estrategias[estrategia] = estrategias.get(estrategia, 0) + 1
    
    for estrategia, count in estrategias.items():
        print(f"   - {estrategia}: {count} arquivos")
    
    print(f"\nüìã CHATS ATUALIZADOS:")
    for chat_id, audio_info in estrutura_audios.items():
        arquivos_chat = len(audio_info['files'])
        mapeados_chat = len([m for m in mapeamentos.values() if m['chat_id'] == chat_id])
        
        print(f"   - Chat {chat_id}: {arquivos_chat} arquivos, {mapeados_chat} mapeados")
    
    return {
        'total_arquivos': total_arquivos,
        'total_mapeados': total_mapeados,
        'chats_com_audios': len(estrutura_audios),
        'chats_no_banco': len(chats_info),
        'estrategias': estrategias
    }

def main():
    """Fun√ß√£o principal"""
    print("üéµ ATUALIZADOR AUTOM√ÅTICO DE CHATS COM √ÅUDIOS")
    print("=" * 80)
    print("Mapeia automaticamente √°udios j√° baixados com chats existentes")
    print("=" * 80)
    
    # 1. Analisar estrutura de √°udios
    estrutura_audios = analisar_estrutura_audios()
    if not estrutura_audios:
        print("‚ùå Nenhum √°udio encontrado para processar")
        return
    
    # 2. Buscar chats existentes
    chats_info = buscar_chats_existentes()
    
    # 3. Mapear √°udios com chats
    mapeamentos = mapear_audios_com_chats(estrutura_audios, chats_info)
    
    # 4. Atualizar URLs de m√≠dia
    atualizacoes = atualizar_urls_midias(mapeamentos)
    
    # 5. Relat√≥rio final
    relatorio = criar_relatorio_final(estrutura_audios, chats_info, mapeamentos)
    
    print("\n" + "=" * 80)
    print("üöÄ OPERA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("=" * 80)
    
    print(f"‚úÖ {relatorio['total_mapeados']}/{relatorio['total_arquivos']} arquivos mapeados")
    print(f"‚úÖ {relatorio['chats_com_audios']} chats atualizados com √°udios")
    print(f"‚úÖ {atualizacoes} mensagens atualizadas com URLs locais")
    
    print("\nüí° PR√ìXIMOS PASSOS:")
    print("1. üîÑ Reiniciar servidor Django")
    print("2. üåê Testar frontend - √°udios devem aparecer automaticamente")
    print("3. üîç Verificar logs para confirmar funcionamento")
    print("4. üì± Testar reprodu√ß√£o de √°udios nos chats")

if __name__ == "__main__":
    main() 