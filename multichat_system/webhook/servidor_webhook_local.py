#!/usr/bin/env python3
"""
Servidor Webhook Local para MultiChat System
Baseado na estrutura do betZap para receber dados do WhatsApp
"""

import os
import sys
import json
import logging
import requests
from datetime import datetime
from flask import Flask, request, jsonify
from pyngrok import conf, ngrok
import threading
import time

# Adicionar o diret√≥rio do projeto ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'multichat.settings')
import django
django.setup()

from webhook.processors import WhatsAppWebhookProcessor, WebhookValidator
from core.models import Cliente

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Configura√ß√£o do servidor
NGROK_TOKEN = "249wILexYz7XZWEYPPd4ECjyzzr_2Q8e91e1G9EYEsEtNxNsa"  # Token do betZap
PORT = 5000


class MultiChatWebhookServer:
    """
    Servidor webhook local para MultiChat
    Baseado na estrutura do betZap
    """
    
    def __init__(self, porta=PORT):
        self.porta = porta
        self.app = Flask(__name__)
        self.requisicoes = []
        self.ngrok_url = None
        self.tunnel = None
        self.configurar_rotas()
        
    def configurar_rotas(self):
        """Configura as rotas do Flask"""
        
        @self.app.route('/webhook', methods=['GET', 'POST', 'PUT', 'DELETE', 'PATCH'])
        def webhook():
            """Endpoint principal do webhook"""
            dados = {
                'timestamp': datetime.now().isoformat(),
                'method': request.method,
                'ip': request.remote_addr,
                'user_agent': request.headers.get('User-Agent', ''),
                'headers': dict(request.headers),
                'json': request.get_json(silent=True),
                'data': request.get_data(as_text=True),
                'args': dict(request.args),
                'form': dict(request.form),
                'content_type': request.content_type
            }
            
            self.requisicoes.append(dados)
            self.log_requisicao_completa(dados)
            
            # Processar dados se for POST
            if request.method == 'POST':
                try:
                    resultado = self.processar_webhook(dados)
                    return jsonify(resultado)
                except Exception as e:
                    logger.error(f"Erro ao processar webhook: {e}")
                    return jsonify({
                        'status': 'error',
                        'message': str(e),
                        'timestamp': dados['timestamp']
                    }), 500
            
            return jsonify({
                'status': 'success',
                'message': 'Webhook recebido via Ngrok!',
                'timestamp': dados['timestamp'],
                'total': len(self.requisicoes),
                'ngrok_url': self.ngrok_url
            })
        
        @self.app.route('/webhook/send-message', methods=['POST'])
        def webhook_send_message():
            dados = {
                'timestamp': datetime.now().isoformat(),
                'method': request.method,
                'ip': request.remote_addr,
                'user_agent': request.headers.get('User-Agent', ''),
                'headers': dict(request.headers),
                'json': request.get_json(silent=True),
                'data': request.get_data(as_text=True),
                'args': dict(request.args),
                'form': dict(request.form),
                'content_type': request.content_type
            }
            self.requisicoes.append(dados)
            self.log_requisicao_completa(dados)
            # Processar apenas mensagens enviadas (fromMe true)
            data = dados['json'] or {}
            if data.get('fromMe') or data.get('data', {}).get('fromMe'):
                try:
                    resultado = self.processar_webhook(dados)
                    return jsonify(resultado)
                except Exception as e:
                    logger.error(f"Erro ao processar webhook send-message: {e}")
                    return jsonify({'status': 'error', 'message': str(e), 'timestamp': dados['timestamp']}), 500
            else:
                return jsonify({'status': 'ignored', 'message': 'N√£o √© mensagem enviada', 'timestamp': dados['timestamp']}), 200

        @self.app.route('/webhook/receive-message', methods=['POST'])
        def webhook_receive_message():
            dados = {
                'timestamp': datetime.now().isoformat(),
                'method': request.method,
                'ip': request.remote_addr,
                'user_agent': request.headers.get('User-Agent', ''),
                'headers': dict(request.headers),
                'json': request.get_json(silent=True),
                'data': request.get_data(as_text=True),
                'args': dict(request.args),
                'form': dict(request.form),
                'content_type': request.content_type
            }
            self.requisicoes.append(dados)
            self.log_requisicao_completa(dados)
            # Processar apenas mensagens recebidas (fromMe false)
            data = dados['json'] or {}
            if not data.get('fromMe') and not data.get('data', {}).get('fromMe'):
                try:
                    resultado = self.processar_webhook(dados)
                    return jsonify(resultado)
                except Exception as e:
                    logger.error(f"Erro ao processar webhook receive-message: {e}")
                    return jsonify({'status': 'error', 'message': str(e), 'timestamp': dados['timestamp']}), 500
            else:
                return jsonify({'status': 'ignored', 'message': 'N√£o √© mensagem recebida', 'timestamp': dados['timestamp']}), 200

        @self.app.route('/status')
        def status():
            return jsonify({
                'status': 'online',
                'total_requisicoes': len(self.requisicoes),
                'ngrok_url': self.ngrok_url,
                'porta': self.porta,
                'tunnel_ativo': self.tunnel is not None,
                'sistema': 'MultiChat Webhook Server'
            })
        
        @self.app.route('/requisicoes')
        def listar_requisicoes():
            return jsonify({
                'total': len(self.requisicoes),
                'requisicoes': self.requisicoes[-10:]  # √öltimas 10
            })
        
        @self.app.route('/limpar', methods=['POST'])
        def limpar():
            count = len(self.requisicoes)
            self.requisicoes.clear()
            return jsonify({
                'message': f'{count} requisi√ß√µes removidas',
                'novo_total': 0
            })
        
        @self.app.route('/test')
        def test_webhook():
            """Endpoint para testar o webhook"""
            return jsonify({
                'status': 'success',
                'message': 'Teste do webhook MultiChat',
                'timestamp': datetime.now().isoformat(),
                'url_webhook': f"{self.ngrok_url}/webhook" if self.ngrok_url else None
            })
        
        # Atualizar HTML da home para exibir as novas rotas
        @self.app.route('/')
        def home():
            return f"""
            <h1>üöÄ MultiChat Webhook Funcionando!</h1>
            <p><strong>URL P√∫blica:</strong> <a href=\"{self.ngrok_url}\">{self.ngrok_url}</a></p>
            <p><strong>Total de requisi√ß√µes:</strong> {len(self.requisicoes)}</p>
            <h2>üìã Endpoints Dispon√≠veis:</h2>
            <ul>
                <li><strong>Webhook Principal:</strong> <code>{self.ngrok_url}/webhook</code></li>
                <li><strong>Mensagens Enviadas:</strong> <code>{self.ngrok_url}/webhook/send-message</code></li>
                <li><strong>Mensagens Recebidas:</strong> <code>{self.ngrok_url}/webhook/receive-message</code></li>
                <li><strong>Status:</strong> <a href=\"{self.ngrok_url}/status\">{self.ngrok_url}/status</a></li>
                <li><strong>Requisi√ß√µes:</strong> <a href=\"{self.ngrok_url}/requisicoes\">{self.ngrok_url}/requisicoes</a></li>
                <li><strong>Teste:</strong> <a href=\"{self.ngrok_url}/test\">{self.ngrok_url}/test</a></li>
                <li><strong>Limpar:</strong> <code>POST {self.ngrok_url}/limpar</code></li>
            </ul>
            <h2>üß™ Teste R√°pido:</h2>
            <pre>
curl -X POST {self.ngrok_url}/webhook \\
  -H \"Content-Type: application/json\" \\
  -d '{{"mensagem": "teste", "timestamp": "{datetime.now().isoformat()}"}}'
            </pre>
            <h2>üì± Para WhatsApp Business API:</h2>
            <p>Use estas URLs no webhook:</p>
            <ul>
                <li><strong>Principal:</strong> <code>{self.ngrok_url}/webhook</code></li>
                <li><strong>Mensagens Enviadas:</strong> <code>{self.ngrok_url}/webhook/send-message</code></li>
                <li><strong>Mensagens Recebidas:</strong> <code>{self.ngrok_url}/webhook/receive-message</code></li>
            </ul>
            <h2>üíæ Banco de Dados:</h2>
            <p>Sistema: <strong>MultiChat</strong></p>
            <p>Dados s√£o salvos automaticamente no banco Django</p>
            """
    
    def log_requisicao_completa(self, dados):
        """Log detalhado da requisi√ß√£o"""
        print(f"\nüîî NOVA REQUISI√á√ÉO - {datetime.now().strftime('%H:%M:%S')}")
        print("=" * 60)
        
        # Informa√ß√µes b√°sicas
        print(f"üì° M√©todo: {dados['method']}")
        print(f"üåê IP: {dados['ip']}")
        print(f"üì± User-Agent: {dados['user_agent'][:100]}...")
        
        # An√°lise do conte√∫do
        print(f"üìÑ AN√ÅLISE DO CONTE√öDO:")
        
        conteudo_encontrado = False
        
        # JSON direto
        if dados['json']:
            print(f"‚úÖ JSON encontrado:")
            print(json.dumps(dados['json'], indent=2, ensure_ascii=False))
            conteudo_encontrado = True
            
            # Verificar se √© WhatsApp
            if self.detectar_whatsapp(dados['json']):
                print("üéØ WhatsApp detectado!")
                self.processar_whatsapp(dados['json'])
        
        # Raw data
        elif dados['data']:
            print(f"üìù Raw data encontrado ({len(dados['data'])} chars):")
            print(f"   Conte√∫do: {dados['data'][:500]}...")
            
            # Tentar converter para JSON
            try:
                json_data = json.loads(dados['data'])
                print(f"‚úÖ JSON v√°lido no raw data:")
                print(json.dumps(json_data, indent=2, ensure_ascii=False))
                
                if self.detectar_whatsapp(json_data):
                    print("üéØ WhatsApp detectado!")
                    self.processar_whatsapp(json_data)
                
                conteudo_encontrado = True
            except json.JSONDecodeError:
                print(f"‚ùå N√£o √© JSON v√°lido")
        
        # Formato de outras APIs (W-API, etc.)
        else:
            print("üìã Verificando outros formatos...")
            data = dados.get('json', {}) or dados.get('data', {})
            
            campos_importantes = {
                'sender': 'Remetente',
                'chat': 'Chat',
                'msgContent': 'Conte√∫do',
                'message': 'Mensagem',
                'messageId': 'ID da Mensagem',
                'fromMe': 'De mim',
                'isGroup': '√â grupo',
                'moment': 'Momento'
            }
            
            for campo, nome in campos_importantes.items():
                if campo in data:
                    valor = data[campo]
                    if isinstance(valor, dict):
                        if 'conversation' in valor:
                            valor = valor['conversation']
                        elif 'text' in valor:
                            valor = valor['text']
                    print(f"   {nome}: {valor}")
        
        if not conteudo_encontrado:
            print("‚ö†Ô∏è Nenhum conte√∫do encontrado")
        
        print("=" * 60)
    
    def detectar_whatsapp(self, data):
        """Detecta se os dados s√£o do WhatsApp"""
        # Verificar campos espec√≠ficos do WhatsApp
        whatsapp_fields = [
            'key', 'message', 'messageTimestamp', 'status',
            'sender', 'chat', 'msgContent', 'fromMe'
        ]
        
        # Verificar se cont√©m campos do WhatsApp
        has_whatsapp_fields = any(field in data for field in whatsapp_fields)
        
        # Verificar estrutura espec√≠fica
        if 'key' in data and 'message' in data:
            return True
            
        if 'sender' in data and 'msgContent' in data:
            return True
            
        if 'messageTimestamp' in data:
            return True
            
        return has_whatsapp_fields
    
    def processar_whatsapp(self, data):
        """Processa dados do WhatsApp"""
        try:
            print("üîÑ Processando dados do WhatsApp...")
            
            # Determinar cliente
            cliente = self.determinar_cliente(data)
            if not cliente:
                print("‚ùå Cliente n√£o encontrado")
                return
            
            print(f"üë§ Cliente: {cliente.nome}")
            
            # Processar com o processor
            processor = WhatsAppWebhookProcessor(cliente)
            webhook_event = processor.process_webhook_data(data)
            
            print(f"‚úÖ Webhook processado com sucesso!")
            print(f"   Event ID: {webhook_event.event_id}")
            print(f"   Tipo: {webhook_event.event_type}")
            print(f"   Processado: {webhook_event.processed}")
            
        except Exception as e:
            print(f"‚ùå Erro ao processar WhatsApp: {e}")
    
    def determinar_cliente(self, data):
        """Determina qual cliente deve receber os dados"""
        # Tentar encontrar por instance_id
        instance_id = data.get('instanceId') or data.get('instance_id')
        if instance_id:
            try:
                cliente = Cliente.objects.get(wapi_instance_id=instance_id)
                return cliente
            except Cliente.DoesNotExist:
                pass
        
        # Tentar encontrar por outros campos
        cliente_id = data.get('cliente_id') or data.get('client_id')
        if cliente_id:
            try:
                cliente = Cliente.objects.get(id=cliente_id)
                return cliente
            except Cliente.DoesNotExist:
                pass
        
        # Se n√£o encontrar, usar o primeiro cliente ativo
        try:
            cliente = Cliente.objects.filter(ativo=True).first()
            return cliente
        except:
            return None
    
    def processar_webhook(self, dados):
        """Processa webhook e salva no banco"""
        try:
            # Obter dados JSON
            data = dados.get('json')
            if not data:
                # Tentar parsear raw data
                try:
                    data = json.loads(dados.get('data', '{}'))
                except json.JSONDecodeError:
                    return {
                        'status': 'error',
                        'message': 'Invalid JSON data',
                        'timestamp': dados['timestamp']
                    }
            
            # Validar dados
            if not WebhookValidator.validate_webhook_data(data):
                return {
                    'status': 'error',
                    'message': 'Invalid webhook data',
                    'timestamp': dados['timestamp']
                }
            
            # Sanitizar dados
            sanitized_data = WebhookValidator.sanitize_data(data)
            
            # Determinar cliente
            cliente = self.determinar_cliente(sanitized_data)
            if not cliente:
                return {
                    'status': 'error',
                    'message': 'Client not found',
                    'timestamp': dados['timestamp']
                }
            
            # Processar webhook
            processor = WhatsAppWebhookProcessor(cliente)
            webhook_event = processor.process_webhook_data(
                sanitized_data,
                ip_address=dados['ip'],
                user_agent=dados['user_agent']
            )
            
            return {
                'status': 'success',
                'message': 'Webhook processed successfully',
                'event_id': str(webhook_event.event_id),
                'cliente': cliente.nome,
                'timestamp': dados['timestamp']
            }
            
        except Exception as e:
            logger.error(f"Erro ao processar webhook: {e}")
            return {
                'status': 'error',
                'message': str(e),
                'timestamp': dados['timestamp']
            }
    
    def configurar_ngrok(self):
        """Configura o token do ngrok"""
        try:
            print("üîß Configurando token do ngrok...")
            
            # Configurar token
            conf.get_default().auth_token = NGROK_TOKEN
            
            print("‚úÖ Token configurado com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar token: {e}")
            return False
    
    def iniciar_ngrok(self):
        """Inicia o t√∫nel ngrok com HTTPS for√ßado"""
        try:
            print("üöÄ Iniciando t√∫nel ngrok com HTTPS...")
            
            # Configurar ngrok para for√ßar HTTPS
            ngrok_config = conf.get_default()
            ngrok_config.auth_token = NGROK_TOKEN
            
            # Criar t√∫nel com configura√ß√£o espec√≠fica para HTTPS
            self.tunnel = ngrok.connect(
                addr=self.porta,
                bind_tls=True,  # For√ßar HTTPS
                domain=None,     # Usar dom√≠nio padr√£o do ngrok
                name=None,       # Nome autom√°tico
                proto='https'    # Protocolo HTTPS
            )
            
            # Garantir que a URL seja HTTPS
            self.ngrok_url = self.tunnel.public_url
            if not self.ngrok_url.startswith('https://'):
                self.ngrok_url = self.ngrok_url.replace('http://', 'https://')
            
            print(f"‚úÖ T√∫nel HTTPS criado: {self.ngrok_url}")
            print(f"üîí Protocolo: HTTPS")
            print(f"üåê URL P√∫blica: {self.ngrok_url}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao criar t√∫nel HTTPS: {e}")
            print("üîÑ Tentando configura√ß√£o alternativa...")
            
            try:
                # Tentativa alternativa com configura√ß√£o manual
                self.tunnel = ngrok.connect(
                    addr=f"http://localhost:{self.porta}",
                    bind_tls=True
                )
                self.ngrok_url = self.tunnel.public_url
                
                if not self.ngrok_url.startswith('https://'):
                    self.ngrok_url = self.ngrok_url.replace('http://', 'https://')
                
                print(f"‚úÖ T√∫nel HTTPS criado (alternativo): {self.ngrok_url}")
                return True
                
            except Exception as e2:
                print(f"‚ùå Erro na configura√ß√£o alternativa: {e2}")
                return False
    
    def parar_ngrok(self):
        """Para o t√∫nel ngrok"""
        if self.tunnel:
            try:
                ngrok.disconnect(self.tunnel.public_url)
                print("üõë T√∫nel ngrok parado")
            except Exception as e:
                print(f"‚ùå Erro ao parar t√∫nel: {e}")
    
    def iniciar(self):
        """Inicia o servidor"""
        try:
            print("üöÄ INICIANDO MULTICHAT WEBHOOK SERVER")
            print("=" * 60)
            
            # Configurar ngrok
            if not self.configurar_ngrok():
                print("‚ö†Ô∏è Continuando sem ngrok...")
            
            # Iniciar t√∫nel
            if not self.iniciar_ngrok():
                print("‚ö†Ô∏è Servidor rodando apenas localmente")
                self.ngrok_url = f"https://localhost:{self.porta}"
            
            print(f"üåê URL P√∫blica: {self.ngrok_url}")
            print(f"üîß Porta Local: {self.porta}")
            print("=" * 60)
            print("üì± Aguardando requisi√ß√µes...")
            print("üí° Para testar, acesse: /test")
            print("=" * 60)
            
            # Iniciar servidor Flask
            self.app.run(
                host='0.0.0.0',
                port=self.porta,
                debug=False,
                threaded=True
            )
            
        except KeyboardInterrupt:
            print(f"\n\nüëã Encerrando servidor...")
            self.parar_ngrok()
            print(f"üìä Total de requisi√ß√µes processadas: {len(self.requisicoes)}")
            print(f"‚úÖ Servidor encerrado com sucesso!")


def main():
    """Fun√ß√£o principal"""
    print("üöÄ MULTICHAT WEBHOOK SERVER")
    print("=" * 60)
    print("‚úÖ Baseado na estrutura do betZap")
    print("‚úÖ Integra√ß√£o com Django MultiChat")
    print("‚úÖ Processamento autom√°tico de WhatsApp")
    print("‚úÖ Salvamento no banco de dados")
    print("=" * 60)
    
    # Verificar depend√™ncias
    try:
        import flask
        import pyngrok
        print("‚úÖ Depend√™ncias OK")
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("üí° Execute: pip install flask pyngrok")
        return 1
    
    # Verificar Django
    try:
        from django.conf import settings
        print("‚úÖ Django configurado")
    except Exception as e:
        print(f"‚ùå Erro no Django: {e}")
        return 1
    
    # Verificar clientes
    try:
        clientes = Cliente.objects.filter(ativo=True)
        print(f"‚úÖ {clientes.count()} clientes ativos encontrados")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao verificar clientes: {e}")
    
    # Iniciar servidor
    servidor = MultiChatWebhookServer()
    servidor.iniciar()


if __name__ == '__main__':
    sys.exit(main()) 