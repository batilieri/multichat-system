#!/usr/bin/env python3
"""
üîç DIAGN√ìSTICO COMPLETO - SISTEMA DE DOWNLOAD AUTOM√ÅTICO DE M√çDIAS
An√°lise separada por tarefas conforme solicitado
"""

import os
import sys
import django
import json
import requests
from pathlib import Path
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'multichat.settings')
django.setup()

from core.models import Cliente, Chat, Mensagem, WhatsappInstance
from webhook.models import WebhookEvent

class DiagnosticoDownloadMidias:
    def __init__(self):
        self.problemas_encontrados = []
        self.successos = []
        
    def adicionar_problema(self, categoria, problema):
        self.problemas_encontrados.append({
            'categoria': categoria,
            'problema': problema,
            'timestamp': datetime.now()
        })
    
    def adicionar_sucesso(self, categoria, sucesso):
        self.successos.append({
            'categoria': categoria,
            'sucesso': sucesso,
            'timestamp': datetime.now()
        })

    # ==================== TAREFA 1: AN√ÅLISE DO FLUXO ATUAL ====================
    def tarefa_1_analisar_fluxo_atual(self):
        """TAREFA 1: Analisa como est√° fazendo e porque n√£o funciona"""
        print("üîç TAREFA 1: AN√ÅLISE DO FLUXO ATUAL DE DOWNLOAD")
        print("=" * 80)
        
        print("\nüìã 1.1 - MAPEANDO FLUXO DE PROCESSAMENTO AUTOM√ÅTICO")
        print("-" * 60)
        
        # Analisar fluxo no c√≥digo
        fluxo_atual = [
            "1. Webhook recebido em /webhook/receive/",
            "2. process_webhook_message() chamada",
            "3. WhatsappInstance.objects.get(instance_id=instance_id)",
            "4. process_media_automatically() chamada",
            "5. Detecta tipo de m√≠dia em msgContent",
            "6. Extrai mediaKey, directPath, mimetype",
            "7. download_media_via_wapi() chamada",
            "8. POST para https://api.w-api.app/v1/message/download-media",
            "9. save_media_file() para salvar arquivo"
        ]
        
        for i, step in enumerate(fluxo_atual, 1):
            print(f"   {step}")
        
        print("\nüîç 1.2 - VERIFICANDO PONTOS DE FALHA")
        print("-" * 60)
        
        # Verificar se existe function de download
        try:
            from webhook.views import download_media_via_wapi
            print("‚úÖ Fun√ß√£o download_media_via_wapi encontrada")
        except ImportError:
            print("‚ùå Fun√ß√£o download_media_via_wapi N√ÉO encontrada")
            self.adicionar_problema("C√ìDIGO", "Fun√ß√£o download_media_via_wapi n√£o est√° import√°vel")
        
        # Verificar se existe fun√ß√£o de processar m√≠dia
        try:
            from webhook.views import process_media_automatically
            print("‚úÖ Fun√ß√£o process_media_automatically encontrada")
        except ImportError:
            print("‚ùå Fun√ß√£o process_media_automatically N√ÉO encontrada")
            self.adicionar_problema("C√ìDIGO", "Fun√ß√£o process_media_automatically n√£o est√° import√°vel")
        
        # Verificar endpoint usado
        print(f"\nüì° Endpoint W-API usado: https://api.w-api.app/v1/message/download-media")
        print(f"üìÑ M√©todo: POST")
        print(f"üìã Par√¢metros: instanceId, mediaKey, directPath, type, mimetype")
        
        # Verificar WebhookEvents recentes
        print("\nüìä 1.3 - ANALISANDO WEBHOOKS RECENTES")
        print("-" * 60)
        
        webhooks_recentes = WebhookEvent.objects.all().order_by('-timestamp')[:5]
        print(f"Webhooks encontrados: {webhooks_recentes.count()}")
        
        webhooks_com_midia = 0
        for webhook in webhooks_recentes:
            try:
                # raw_data j√° √© um dict, n√£o precisa de json.loads
                data = webhook.raw_data if isinstance(webhook.raw_data, dict) else json.loads(webhook.raw_data)
                msg_content = data.get('msgContent', {})
                tipos_midia = ['audioMessage', 'imageMessage', 'videoMessage', 'documentMessage', 'stickerMessage']
                
                for tipo in tipos_midia:
                    if tipo in msg_content:
                        webhooks_com_midia += 1
                        print(f"‚úÖ Webhook {webhook.event_id}: {tipo} detectado")
                        
                        # Verificar dados essenciais
                        midia_data = msg_content[tipo]
                        tem_media_key = 'mediaKey' in midia_data
                        tem_direct_path = 'directPath' in midia_data
                        tem_mimetype = 'mimetype' in midia_data
                        
                        print(f"   mediaKey: {'‚úÖ' if tem_media_key else '‚ùå'}")
                        print(f"   directPath: {'‚úÖ' if tem_direct_path else '‚ùå'}")
                        print(f"   mimetype: {'‚úÖ' if tem_mimetype else '‚ùå'}")
                        
                        if not (tem_media_key and tem_direct_path and tem_mimetype):
                            self.adicionar_problema("DADOS", f"Webhook {webhook.event_id} com dados incompletos para {tipo}")
                        
                        break
            except Exception as e:
                print(f"‚ùå Erro ao analisar webhook {webhook.event_id}: {e}")
        
        print(f"\nüìä RESUMO TAREFA 1:")
        print(f"   Webhooks com m√≠dia: {webhooks_com_midia}/{webhooks_recentes.count()}")
        
        if webhooks_com_midia == 0:
            self.adicionar_problema("DADOS", "Nenhum webhook com m√≠dia encontrado nos √∫ltimos registros")
        
        return {
            'fluxo_mapeado': True,
            'funcoes_existem': True,
            'webhooks_com_midia': webhooks_com_midia
        }

    # ==================== TAREFA 2: VERIFICA√á√ÉO DE ENDPOINTS WAPI ====================
    def tarefa_2_verificar_endpoints_wapi(self):
        """TAREFA 2: Verifica se est√° usando a WAPI com todos os endpoints corretamente"""
        print("\nüåê TAREFA 2: VERIFICA√á√ÉO DE ENDPOINTS W-API")
        print("=" * 80)
        
        print("\nüìã 2.1 - ENDPOINTS W-API DISPON√çVEIS")
        print("-" * 60)
        
        endpoints_wapi = {
            'status': '/instance/status-instance',
            'qr_code': '/instance/qr-code', 
            'send_text': '/message/send-text',
            'download_media': '/message/download-media',  # USADO NO SISTEMA
            'send_media': '/message/send-media',
            'webhook_status': '/webhook/status'
        }
        
        for nome, endpoint in endpoints_wapi.items():
            usado = "‚úÖ USADO" if nome == 'download_media' else "‚ö™ Dispon√≠vel"
            print(f"   {nome}: {endpoint} - {usado}")
        
        print("\nüîç 2.2 - VERIFICANDO ENDPOINT DE DOWNLOAD")
        print("-" * 60)
        
        # Verificar se cliente tem configura√ß√£o
        cliente = Cliente.objects.first()
        if not cliente:
            print("‚ùå Nenhum cliente encontrado!")
            self.adicionar_problema("CONFIGURA√á√ÉO", "Nenhum cliente configurado no sistema")
            return {'endpoints_corretos': False}
        
        print(f"Cliente: {cliente.nome}")
        print(f"WAPI Instance ID: {cliente.wapi_instance_id}")
        print(f"WAPI Token: {cliente.wapi_token[:20] if cliente.wapi_token else 'NENHUM'}...")
        
        if not cliente.wapi_instance_id or not cliente.wapi_token:
            print("‚ùå Configura√ß√£o W-API incompleta no cliente!")
            self.adicionar_problema("CONFIGURA√á√ÉO", f"Cliente {cliente.nome} sem configura√ß√£o W-API completa")
            return {'endpoints_corretos': False}
        
        # Testar endpoint de status
        print("\nüì° 2.3 - TESTANDO CONECTIVIDADE W-API")
        print("-" * 60)
        
        try:
            status_url = f"https://api.w-api.app/v1/instance/status-instance"
            headers = {
                'Authorization': f'Bearer {cliente.wapi_token}',
                'Content-Type': 'application/json'
            }
            params = {'instanceId': cliente.wapi_instance_id}
            
            response = requests.get(status_url, headers=headers, params=params, timeout=15)
            print(f"Status da inst√¢ncia: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Inst√¢ncia conectada: {data.get('connected', 'N/A')}")
                print(f"‚úÖ Status: {data.get('status', 'N/A')}")
                self.adicionar_sucesso("W-API", "Conectividade com W-API funcionando")
            else:
                print(f"‚ùå Erro de conectividade: {response.text}")
                self.adicionar_problema("W-API", f"Inst√¢ncia n√£o conectada: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erro ao conectar com W-API: {e}")
            self.adicionar_problema("W-API", f"Erro de conex√£o: {str(e)}")
        
        # Testar endpoint de download com dados de teste
        print("\nüß™ 2.4 - TESTANDO ENDPOINT DE DOWNLOAD")
        print("-" * 60)
        
        dados_teste = {
            'mediaKey': 'TEST_MEDIA_KEY_123',
            'directPath': '/v/test-path',
            'type': 'audio',
            'mimetype': 'audio/ogg'
        }
        
        try:
            download_url = f"https://api.w-api.app/v1/message/download-media"
            headers = {
                'Authorization': f'Bearer {cliente.wapi_token}',
                'Content-Type': 'application/json'
            }
            params = {'instanceId': cliente.wapi_instance_id}
            
            response = requests.post(download_url, headers=headers, params=params, json=dados_teste, timeout=15)
            print(f"Endpoint de download: {response.status_code}")
            
            if response.status_code == 200:
                print("‚úÖ Endpoint de download acess√≠vel")
                self.adicionar_sucesso("W-API", "Endpoint de download acess√≠vel")
            else:
                print(f"‚ö†Ô∏è Endpoint responde mas com erro: {response.text}")
                # N√£o √© problema cr√≠tico, pode ser dados de teste inv√°lidos
                
        except Exception as e:
            print(f"‚ùå Erro ao testar endpoint de download: {e}")
            self.adicionar_problema("W-API", f"Endpoint de download inacess√≠vel: {str(e)}")
        
        return {
            'endpoints_corretos': True,
            'configuracao_cliente': bool(cliente.wapi_instance_id and cliente.wapi_token),
            'conectividade': True
        }

    # ==================== TAREFA 3: VERIFICA√á√ÉO DE AUTENTICA√á√ÉO MULTICLIENTE ====================
    def tarefa_3_verificar_autenticacao_multicliente(self):
        """TAREFA 3: Verifica autentica√ß√£o por cliente, inst√¢ncia e dados multicliente"""
        print("\nüë• TAREFA 3: VERIFICA√á√ÉO DE AUTENTICA√á√ÉO MULTICLIENTE")
        print("=" * 80)
        
        print("\nüìã 3.1 - ESTRUTURA MULTICLIENTE")
        print("-" * 60)
        
        # Verificar quantos clientes existem
        total_clientes = Cliente.objects.count()
        total_instancias = WhatsappInstance.objects.count()
        
        print(f"Total de clientes: {total_clientes}")
        print(f"Total de inst√¢ncias WhatsApp: {total_instancias}")
        
        if total_clientes == 0:
            print("‚ùå Nenhum cliente configurado!")
            self.adicionar_problema("MULTICLIENTE", "Sistema sem clientes configurados")
            return {'multicliente_ok': False}
        
        # Analisar cada cliente
        print("\nüîç 3.2 - AN√ÅLISE POR CLIENTE")
        print("-" * 60)
        
        for cliente in Cliente.objects.all():
            print(f"\nüë§ Cliente: {cliente.nome} (ID: {cliente.id})")
            
            # Verificar inst√¢ncias do cliente
            instancias_cliente = WhatsappInstance.objects.filter(cliente=cliente)
            print(f"   Inst√¢ncias: {instancias_cliente.count()}")
            
            for instancia in instancias_cliente:
                print(f"     - {instancia.instance_id} (Status: {instancia.status})")
            
            # Verificar chats do cliente
            chats_cliente = Chat.objects.filter(cliente=cliente).count()
            print(f"   Chats: {chats_cliente}")
            
            # Verificar configura√ß√£o W-API no cliente (campo legado)
            tem_wapi_legado = bool(cliente.wapi_instance_id and cliente.wapi_token)
            print(f"   W-API legado: {'‚úÖ' if tem_wapi_legado else '‚ùå'}")
            
            if tem_wapi_legado:
                print(f"     Instance ID: {cliente.wapi_instance_id}")
                print(f"     Token: {cliente.wapi_token[:20]}...")
            
            # Verificar se h√° inst√¢ncia dedicada
            if instancias_cliente.exists():
                instancia_ativa = instancias_cliente.filter(status='connected').first()
                if instancia_ativa:
                    print(f"   ‚úÖ Inst√¢ncia ativa: {instancia_ativa.instance_id}")
                    self.adicionar_sucesso("MULTICLIENTE", f"Cliente {cliente.nome} com inst√¢ncia ativa")
                else:
                    print(f"   ‚ö†Ô∏è Nenhuma inst√¢ncia conectada")
                    self.adicionar_problema("MULTICLIENTE", f"Cliente {cliente.nome} sem inst√¢ncia conectada")
            else:
                print(f"   ‚ùå Nenhuma inst√¢ncia configurada")
                self.adicionar_problema("MULTICLIENTE", f"Cliente {cliente.nome} sem inst√¢ncias")
        
        print("\nüîç 3.3 - VERIFICANDO FLUXO DE AUTENTICA√á√ÉO NO WEBHOOK")
        print("-" * 60)
        
        # Simular processo de autentica√ß√£o
        print("Fluxo de autentica√ß√£o no processo autom√°tico:")
        print("1. webhook_data.get('instanceId') -> extrai instance_id")
        print("2. WhatsappInstance.objects.get(instance_id=instance_id)")
        print("3. cliente = instance.cliente")
        print("4. Usa instance.token para W-API")
        
        # Verificar se o fluxo funciona
        instancias_teste = WhatsappInstance.objects.all()[:3]
        for instancia in instancias_teste:
            print(f"\nüß™ Testando inst√¢ncia: {instancia.instance_id}")
            print(f"   Cliente: {instancia.cliente.nome}")
            print(f"   Token: {instancia.token[:20] if instancia.token else 'NENHUM'}...")
            
            if not instancia.token:
                self.adicionar_problema("AUTENTICA√á√ÉO", f"Inst√¢ncia {instancia.instance_id} sem token")
        
        print("\nüìÅ 3.4 - VERIFICANDO ESTRUTURA DE PASTAS POR CLIENTE")
        print("-" * 60)
        
        media_storage_base = Path("media_storage")
        
        for cliente in Cliente.objects.all():
            pasta_cliente = media_storage_base / f"cliente_{cliente.id}"
            print(f"\nüìÇ Cliente {cliente.nome} (ID: {cliente.id})")
            print(f"   Pasta: {pasta_cliente}")
            print(f"   Existe: {'‚úÖ' if pasta_cliente.exists() else '‚ùå'}")
            
            if pasta_cliente.exists():
                # Verificar pastas de inst√¢ncias
                for item in pasta_cliente.iterdir():
                    if item.is_dir() and item.name.startswith('instance_'):
                        instance_id = item.name.replace('instance_', '')
                        print(f"     - Inst√¢ncia: {instance_id}")
                        
                        # Verificar subpastas de m√≠dias
                        for subpasta in ['chats', 'audio', 'imagens', 'videos']:
                            sub_path = item / subpasta
                            if sub_path.exists():
                                print(f"       {subpasta}: ‚úÖ")
                            else:
                                print(f"       {subpasta}: ‚ùå")
        
        return {
            'multicliente_ok': total_clientes > 0,
            'instancias_configuradas': total_instancias > 0,
            'estrutura_pastas': media_storage_base.exists()
        }

    # ==================== TAREFA 4: COMPARA√á√ÉO TESTES VS AUTOM√ÅTICO ====================
    def tarefa_4_comparar_testes_vs_automatico(self):
        """TAREFA 4: Analisa porque testes funcionam mas autom√°tico n√£o"""
        print("\nüÜö TAREFA 4: COMPARA√á√ÉO TESTES FUNCIONAIS VS SISTEMA AUTOM√ÅTICO")
        print("=" * 80)
        
        print("\nüìã 4.1 - AN√ÅLISE DOS TESTES QUE FUNCIONAM")
        print("-" * 60)
        
        # Verificar arquivos de teste
        arquivos_teste = [
            '../test_audio_real.py',
            '../test_download_automatico.py', 
            '../test_wapi_direct.py',
            '../test_media_endpoint.py'
        ]
        
        testes_encontrados = []
        for arquivo in arquivos_teste:
            if Path(arquivo).exists():
                testes_encontrados.append(arquivo)
                print(f"‚úÖ {arquivo} encontrado")
            else:
                print(f"‚ùå {arquivo} n√£o encontrado")
        
        if not testes_encontrados:
            print("‚ùå Nenhum arquivo de teste encontrado!")
            self.adicionar_problema("TESTES", "Arquivos de teste n√£o encontrados")
            return {'comparacao_ok': False}
        
        print("\nüîç 4.2 - DIFEREN√áAS IDENTIFICADAS")
        print("-" * 60)
        
        diferencas = [
            {
                'aspecto': 'Dados de Entrada',
                'teste': 'Usa dados hardcoded/controlados',
                'automatico': 'Usa dados do webhook (podem estar incompletos)',
                'impacto': 'CR√çTICO'
            },
            {
                'aspecto': 'Autentica√ß√£o',
                'teste': 'Usa credenciais diretas (test_wapi_direct.py)',
                'automatico': 'Busca credenciais do banco via instance_id',
                'impacto': 'ALTO'
            },
            {
                'aspecto': 'Endpoint W-API',
                'teste': 'Testa diretamente sem processamento adicional',
                'automatico': 'Passa por m√∫ltiplas fun√ß√µes de processamento',
                'impacto': 'M√âDIO'
            },
            {
                'aspecto': 'Tratamento de Erros',
                'teste': 'Exibe erros diretamente no console',
                'automatico': 'Pode mascarar erros em try/catch',
                'impacto': 'ALTO'
            },
            {
                'aspecto': 'Valida√ß√£o de Dados',
                'teste': 'Dados sempre v√°lidos (controlados)',
                'automatico': 'Precisa validar dados recebidos do webhook',
                'impacto': 'CR√çTICO'
            }
        ]
        
        for diff in diferencas:
            print(f"\nüîç {diff['aspecto']} - IMPACTO: {diff['impacto']}")
            print(f"   Teste: {diff['teste']}")
            print(f"   Autom√°tico: {diff['automatico']}")
        
        print("\nüîç 4.3 - ANALISANDO DADOS DE ENTRADA")
        print("-" * 60)
        
        # Comparar dados de teste vs dados reais de webhook
        print("üìä Dados de teste (test_download_automatico.py):")
        dados_teste = {
            "instanceId": "3B6XIW-ZTS923-GEAY6V",
            "msgContent": {
                "audioMessage": {
                    "mediaKey": "TEST_MEDIA_KEY_123",
                    "directPath": "/v/test-path",
                    "mimetype": "audio/ogg",
                    "fileLength": "4478"
                }
            }
        }
        
        for key, value in dados_teste.items():
            print(f"   {key}: {value}")
        
        # Verificar dados reais de webhooks
        print("\nüìä Dados reais de webhooks:")
        webhook_real = WebhookEvent.objects.first()
        if webhook_real:
            try:
                # raw_data j√° √© um dict, n√£o precisa de json.loads
                data = webhook_real.raw_data if isinstance(webhook_real.raw_data, dict) else json.loads(webhook_real.raw_data)
                instance_id = data.get('instanceId', 'N/A')
                msg_content = data.get('msgContent', {})
                
                print(f"   instanceId: {instance_id}")
                
                for tipo_midia in ['audioMessage', 'imageMessage', 'videoMessage']:
                    if tipo_midia in msg_content:
                        midia_data = msg_content[tipo_midia]
                        print(f"   {tipo_midia}:")
                        for key in ['mediaKey', 'directPath', 'mimetype']:
                            valor = midia_data.get(key, 'AUSENTE')
                            status = '‚úÖ' if valor != 'AUSENTE' else '‚ùå'
                            print(f"     {key}: {status} {valor[:50] if valor != 'AUSENTE' else ''}")
                        break
                        
            except Exception as e:
                print(f"   ‚ùå Erro ao analisar webhook real: {e}")
        else:
            print("   ‚ö†Ô∏è Nenhum webhook real encontrado")
        
        print("\nüîç 4.4 - SIMULANDO TESTE AUTOM√ÅTICO")
        print("-" * 60)
        
        # Simular o processo autom√°tico com dados controlados
        cliente = Cliente.objects.first()
        if cliente and cliente.wapi_instance_id and cliente.wapi_token:
            print("üß™ Simulando download autom√°tico com dados de teste...")
            
            dados_simulacao = {
                'mediaKey': 'TEST_MEDIA_KEY_123',
                'directPath': '/v/test-path',
                'type': 'audio',
                'mimetype': 'audio/ogg'
            }
            
            try:
                # Simular chamada para W-API (mesmo endpoint que o autom√°tico usa)
                url = f"https://api.w-api.app/v1/message/download-media?instanceId={cliente.wapi_instance_id}"
                headers = {
                    'Authorization': f'Bearer {cliente.wapi_token}',
                    'Content-Type': 'application/json'
                }
                
                response = requests.post(url, headers=headers, json=dados_simulacao, timeout=15)
                print(f"   Status: {response.status_code}")
                
                if response.status_code == 200:
                    print("‚úÖ Simula√ß√£o funcionou - problema n√£o √© no endpoint")
                    self.adicionar_sucesso("DIAGN√ìSTICO", "Endpoint W-API funciona com dados controlados")
                else:
                    print(f"‚ùå Simula√ß√£o falhou: {response.text}")
                    self.adicionar_problema("DIAGN√ìSTICO", "Endpoint W-API falha mesmo com dados controlados")
                    
            except Exception as e:
                print(f"‚ùå Erro na simula√ß√£o: {e}")
                self.adicionar_problema("DIAGN√ìSTICO", f"Erro na simula√ß√£o: {str(e)}")
        
        return {
            'comparacao_ok': True,
            'testes_encontrados': len(testes_encontrados),
            'diferencas_identificadas': len(diferencas)
        }

    # ==================== RELAT√ìRIO FINAL ====================
    def gerar_relatorio_final(self):
        """Gera relat√≥rio final com todos os problemas e solu√ß√µes"""
        print("\n" + "=" * 80)
        print("üìä RELAT√ìRIO FINAL - DIAGN√ìSTICO COMPLETO")
        print("=" * 80)
        
        print(f"\n‚úÖ SUCESSOS IDENTIFICADOS: {len(self.successos)}")
        for sucesso in self.successos:
            print(f"   [{sucesso['categoria']}] {sucesso['sucesso']}")
        
        print(f"\n‚ùå PROBLEMAS IDENTIFICADOS: {len(self.problemas_encontrados)}")
        problemas_por_categoria = {}
        
        for problema in self.problemas_encontrados:
            categoria = problema['categoria']
            if categoria not in problemas_por_categoria:
                problemas_por_categoria[categoria] = []
            problemas_por_categoria[categoria].append(problema['problema'])
        
        for categoria, problemas in problemas_por_categoria.items():
            print(f"\nüö® {categoria}:")
            for problema in problemas:
                print(f"   - {problema}")
        
        print("\nüéØ PRINCIPAIS CAUSAS IDENTIFICADAS:")
        print("-" * 60)
        
        causas_principais = [
            "1. DADOS INCOMPLETOS: Webhooks podem n√£o ter mediaKey/directPath/mimetype completos",
            "2. AUTENTICA√á√ÉO: Poss√≠vel problema na busca de credenciais por instance_id", 
            "3. ENDPOINT: W-API pode estar retornando erro mesmo com configura√ß√£o correta",
            "4. PROCESSAMENTO: Fun√ß√µes autom√°ticas podem ter bugs n√£o presentes nos testes",
            "5. VALIDA√á√ÉO: Sistema autom√°tico pode estar rejeitando dados v√°lidos"
        ]
        
        for causa in causas_principais:
            print(f"   {causa}")
        
        print("\nüîß RECOMENDA√á√ïES PRIORIT√ÅRIAS:")
        print("-" * 60)
        
        recomendacoes = [
            "1. LOGS DETALHADOS: Adicionar logs em cada etapa do processo autom√°tico",
            "2. VALIDA√á√ÉO DE DADOS: Verificar se webhooks cont√™m dados completos",
            "3. TESTE ISOLADO: Testar download_media_via_wapi() isoladamente",
            "4. WEBHOOK REAL: Capturar webhook real e testar manualmente",
            "5. COMPARA√á√ÉO: Executar teste e autom√°tico com mesmos dados"
        ]
        
        for rec in recomendacoes:
            print(f"   {rec}")

def main():
    """Fun√ß√£o principal - executa todas as tarefas"""
    print("üîç DIAGN√ìSTICO COMPLETO - SISTEMA DE DOWNLOAD AUTOM√ÅTICO DE M√çDIAS")
    print("=" * 80)
    print("Separa√ß√£o por tarefas conforme solicitado:")
    print("1. An√°lise do fluxo atual e porque n√£o funciona")
    print("2. Verifica√ß√£o de endpoints W-API")
    print("3. Verifica√ß√£o de autentica√ß√£o multicliente")
    print("4. Compara√ß√£o entre testes funcionais e sistema autom√°tico")
    print("=" * 80)
    
    diagnostico = DiagnosticoDownloadMidias()
    
    try:
        # Executar todas as tarefas
        resultado_1 = diagnostico.tarefa_1_analisar_fluxo_atual()
        resultado_2 = diagnostico.tarefa_2_verificar_endpoints_wapi()
        resultado_3 = diagnostico.tarefa_3_verificar_autenticacao_multicliente()
        resultado_4 = diagnostico.tarefa_4_comparar_testes_vs_automatico()
        
        # Gerar relat√≥rio final
        diagnostico.gerar_relatorio_final()
        
        print("\n" + "=" * 80)
        print("‚úÖ DIAGN√ìSTICO COMPLETO FINALIZADO!")
        print("üìã Use as informa√ß√µes acima para corrigir o sistema de download autom√°tico")
        print("=" * 80)
        
    except Exception as e:
        print(f"\n‚ùå ERRO NO DIAGN√ìSTICO: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 