#!/usr/bin/env python
"""
Script para verificar mensagens edit√°veis no banco de dados
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'multichat.settings')
django.setup()

from api.models import Mensagem, Chat, Cliente
from django.db.models import Q

def verificar_mensagens_editaveis():
    """Verifica mensagens que podem ser editadas"""
    print("üîç Verificando mensagens edit√°veis no banco de dados...")
    
    # Buscar mensagens que atendem aos crit√©rios de edi√ß√£o
    mensagens_editaveis = Mensagem.objects.filter(
        Q(tipo='texto') | Q(tipo='text'),
        from_me=True,
        message_id__isnull=False
    ).exclude(message_id='')
    
    print(f"\nüìä Total de mensagens edit√°veis encontradas: {mensagens_editaveis.count()}")
    
    if mensagens_editaveis.count() == 0:
        print("\n‚ùå Nenhuma mensagem edit√°vel encontrada!")
        print("üí° Para testar a edi√ß√£o, voc√™ precisa de mensagens que:")
        print("   - Sejam do tipo 'texto' ou 'text'")
        print("   - Tenham from_me=True (enviadas por voc√™)")
        print("   - Tenham message_id preenchido")
        return
    
    print("\nüìù Mensagens edit√°veis encontradas:")
    for i, msg in enumerate(mensagens_editaveis[:5], 1):  # Mostrar apenas as primeiras 5
        print(f"\n{i}. ID: {msg.id}")
        print(f"   Chat: {msg.chat.chat_id}")
        print(f"   Cliente: {msg.chat.cliente.nome}")
        print(f"   Message ID: {msg.message_id}")
        print(f"   From Me: {msg.from_me}")
        print(f"   Tipo: {msg.tipo}")
        print(f"   Conte√∫do: {msg.conteudo[:50]}...")
        print(f"   Data: {msg.data_envio}")
    
    if mensagens_editaveis.count() > 5:
        print(f"\n... e mais {mensagens_editaveis.count() - 5} mensagens")

def verificar_todas_mensagens():
    """Verifica todas as mensagens para debug"""
    print("\nüîç Verificando todas as mensagens...")
    
    total_mensagens = Mensagem.objects.count()
    print(f"üìä Total de mensagens no banco: {total_mensagens}")
    
    if total_mensagens == 0:
        print("‚ùå Nenhuma mensagem encontrada no banco!")
        return
    
    # Estat√≠sticas por tipo
    tipos = Mensagem.objects.values_list('tipo', flat=True).distinct()
    print(f"\nüìã Tipos de mensagem encontrados: {list(tipos)}")
    
    for tipo in tipos:
        count = Mensagem.objects.filter(tipo=tipo).count()
        print(f"   - {tipo}: {count} mensagens")
    
    # Estat√≠sticas por from_me
    from_me_count = Mensagem.objects.filter(from_me=True).count()
    from_others_count = Mensagem.objects.filter(from_me=False).count()
    print(f"\nüë§ Mensagens por remetente:")
    print(f"   - Enviadas por voc√™ (from_me=True): {from_me_count}")
    print(f"   - Recebidas de outros (from_me=False): {from_others_count}")
    
    # Estat√≠sticas por message_id
    with_message_id = Mensagem.objects.filter(message_id__isnull=False).exclude(message_id='').count()
    without_message_id = Mensagem.objects.filter(Q(message_id__isnull=True) | Q(message_id='')).count()
    print(f"\nüÜî Mensagens por message_id:")
    print(f"   - Com message_id: {with_message_id}")
    print(f"   - Sem message_id: {without_message_id}")

def verificar_mensagem_especifica(mensagem_id):
    """Verifica uma mensagem espec√≠fica"""
    try:
        msg = Mensagem.objects.get(id=mensagem_id)
        print(f"\nüîç Detalhes da mensagem {mensagem_id}:")
        print(f"   ID: {msg.id}")
        print(f"   Chat: {msg.chat.chat_id}")
        print(f"   Cliente: {msg.chat.cliente.nome}")
        print(f"   Message ID: {msg.message_id}")
        print(f"   From Me: {msg.from_me}")
        print(f"   Tipo: {msg.tipo}")
        print(f"   Conte√∫do: {msg.conteudo}")
        print(f"   Data: {msg.data_envio}")
        
        # Verificar se pode ser editada
        pode_editar = (
            msg.tipo in ['texto', 'text'] and
            msg.from_me and
            msg.message_id and
            msg.message_id.strip() != ''
        )
        
        print(f"\n‚úÖ Pode ser editada: {'SIM' if pode_editar else 'N√ÉO'}")
        
        if not pode_editar:
            print("‚ùå Motivos pelos quais n√£o pode ser editada:")
            if msg.tipo not in ['texto', 'text']:
                print(f"   - Tipo '{msg.tipo}' n√£o √© texto")
            if not msg.from_me:
                print("   - N√£o foi enviada por voc√™ (from_me=False)")
            if not msg.message_id or msg.message_id.strip() == '':
                print("   - N√£o tem message_id")
        
    except Mensagem.DoesNotExist:
        print(f"‚ùå Mensagem com ID {mensagem_id} n√£o encontrada!")

if __name__ == "__main__":
    print("üß™ Script de verifica√ß√£o de mensagens edit√°veis")
    print("=" * 50)
    
    verificar_todas_mensagens()
    verificar_mensagens_editaveis()
    
    # Se foi passado um ID espec√≠fico como argumento
    if len(sys.argv) > 1:
        try:
            mensagem_id = int(sys.argv[1])
            verificar_mensagem_especifica(mensagem_id)
        except ValueError:
            print(f"‚ùå ID inv√°lido: {sys.argv[1]}")
    
    print("\n‚úÖ Verifica√ß√£o conclu√≠da!") 