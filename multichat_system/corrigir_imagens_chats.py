#!/usr/bin/env python3
"""
Script Django para corrigir imagens de perfil dos chats j√° existentes
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'multichat.settings')
django.setup()

from webhook.models import WebhookEvent, Chat, Sender
from core.models import Chat as CoreChat, Cliente
from django.utils import timezone
import json
import logging

logger = logging.getLogger(__name__)

def corrigir_imagens_chats_existentes():
    """Corrige as imagens de perfil dos chats j√° existentes"""
    print("üîß CORRIGINDO IMAGENS DE PERFIL DOS CHATS EXISTENTES")
    print("=" * 60)
    
    # Obter todos os clientes
    clientes = Cliente.objects.all()
    
    total_corrigidos = 0
    total_verificados = 0
    
    for cliente in clientes:
        print(f"\nüë§ Processando cliente: {cliente.nome}")
        
        # Buscar chats do cliente
        chats = Chat.objects.filter(cliente=cliente)
        core_chats = CoreChat.objects.filter(cliente=cliente)
        
        print(f"üìä Encontrados {chats.count()} chats webhook e {core_chats.count()} chats core")
        
        # Processar chats webhook
        for chat in chats:
            total_verificados += 1
            print(f"\nüîç Verificando chat webhook: {chat.chat_id} - {chat.chat_name}")
            print(f"üñºÔ∏è Foto atual: {chat.profile_picture}")
            
            # Buscar webhooks relacionados a este chat
            webhook_events = WebhookEvent.objects.filter(
                chat_id=chat.chat_id,
                cliente=cliente
            ).order_by('-timestamp')
            
            if webhook_events.exists():
                # Buscar o webhook mais recente com dados v√°lidos
                for event in webhook_events:
                    if event.raw_data:
                        webhook_data = event.raw_data
                        
                        # Verificar se √© uma mensagem enviada pelo usu√°rio
                        from_me = webhook_data.get('fromMe', False)
                        
                        if from_me:
                            print(f"üîÑ Encontrada mensagem enviada pelo usu√°rio (fromMe: true)")
                            
                            # Extrair foto correta do chat
                            chat_data = webhook_data.get('chat', {})
                            correct_profile_picture = chat_data.get('profilePicture')
                            
                            if correct_profile_picture and correct_profile_picture != chat.profile_picture:
                                print(f"üñºÔ∏è Foto correta encontrada: {correct_profile_picture}")
                                
                                # Atualizar chat
                                chat.profile_picture = correct_profile_picture
                                chat.save()
                                
                                print(f"‚úÖ Chat webhook atualizado com foto correta!")
                                total_corrigidos += 1
                                break
                            else:
                                print(f"‚ÑπÔ∏è Foto j√° est√° correta ou n√£o h√° foto dispon√≠vel")
                                break
                        else:
                            print(f"üì• Mensagem recebida (fromMe: false) - mantendo foto atual")
                            break
            else:
                print(f"‚ö†Ô∏è Nenhum webhook encontrado para este chat")
        
        # Processar chats core
        for core_chat in core_chats:
            total_verificados += 1
            print(f"\nüîç Verificando core chat: {core_chat.chat_id} - {core_chat.chat_name}")
            print(f"üñºÔ∏è Foto atual: {core_chat.foto_perfil}")
            
            # Buscar webhooks relacionados a este chat
            webhook_events = WebhookEvent.objects.filter(
                chat_id=core_chat.chat_id,
                cliente=cliente
            ).order_by('-timestamp')
            
            if webhook_events.exists():
                # Buscar o webhook mais recente com dados v√°lidos
                for event in webhook_events:
                    if event.raw_data:
                        webhook_data = event.raw_data
                        
                        # Verificar se √© uma mensagem enviada pelo usu√°rio
                        from_me = webhook_data.get('fromMe', False)
                        
                        if from_me:
                            print(f"üîÑ Encontrada mensagem enviada pelo usu√°rio (fromMe: true)")
                            
                            # Extrair foto correta do chat
                            chat_data = webhook_data.get('chat', {})
                            correct_profile_picture = chat_data.get('profilePicture')
                            
                            if correct_profile_picture and correct_profile_picture != core_chat.foto_perfil:
                                print(f"üñºÔ∏è Foto correta encontrada: {correct_profile_picture}")
                                
                                # Atualizar core chat
                                core_chat.foto_perfil = correct_profile_picture
                                core_chat.save()
                                
                                print(f"‚úÖ Core chat atualizado com foto correta!")
                                total_corrigidos += 1
                                break
                            else:
                                print(f"‚ÑπÔ∏è Foto j√° est√° correta ou n√£o h√° foto dispon√≠vel")
                                break
                        else:
                            print(f"üì• Mensagem recebida (fromMe: false) - mantendo foto atual")
                            break
            else:
                print(f"‚ö†Ô∏è Nenhum webhook encontrado para este core chat")
    
    print(f"\n‚úÖ CORRE√á√ÉO CONCLU√çDA!")
    print(f"üìä Total de chats verificados: {total_verificados}")
    print(f"üîß Total de chats corrigidos: {total_corrigidos}")

def verificar_correcoes():
    """Verifica se as corre√ß√µes foram aplicadas corretamente"""
    print("\nüîç VERIFICANDO CORRE√á√ïES APLICADAS")
    print("=" * 60)
    
    # Buscar chats com fotos de perfil
    chats_com_foto = Chat.objects.exclude(profile_picture__isnull=True).exclude(profile_picture='')
    core_chats_com_foto = CoreChat.objects.exclude(foto_perfil__isnull=True).exclude(foto_perfil='')
    
    print(f"üìä Chats webhook com foto: {chats_com_foto.count()}")
    print(f"üìä Core chats com foto: {core_chats_com_foto.count()}")
    
    # Mostrar alguns exemplos
    print("\nüìã Exemplos de chats corrigidos:")
    
    for i, chat in enumerate(chats_com_foto[:5]):
        print(f"  {i+1}. {chat.chat_id} - {chat.chat_name}")
        print(f"     üñºÔ∏è Foto: {chat.profile_picture[:50]}...")
    
    for i, core_chat in enumerate(core_chats_com_foto[:5]):
        print(f"  {i+1}. {core_chat.chat_id} - {core_chat.chat_name}")
        print(f"     üñºÔ∏è Foto: {core_chat.foto_perfil[:50]}...")

def main():
    """Fun√ß√£o principal"""
    print("üîß CORRE√á√ÉO DE IMAGENS DE PERFIL DOS CHATS EXISTENTES")
    print("=" * 60)
    
    try:
        # Aplicar corre√ß√µes
        corrigir_imagens_chats_existentes()
        
        # Verificar corre√ß√µes
        verificar_correcoes()
        
        print("\n‚úÖ Processo conclu√≠do com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro durante a corre√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 