#!/usr/bin/env python3
"""
Script para testar com dados reais do webhook de √°udio
"""

import os
import sys
import django
import json
import requests
from pathlib import Path

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'multichat.settings')
django.setup()

from core.models import WhatsappInstance, MediaFile
from webhook.views import process_media_automatically, download_media_via_wapi, save_media_file

def testar_webhook_audio_real():
    """Testa com dados reais do webhook de √°udio"""
    print("üß™ Testando com dados reais do webhook de √°udio...")
    
    # Dados reais do webhook fornecido
    webhook_data = {
        "instanceId": "3B6XIW-ZTS923-GEAY6V",
        "messageId": "B80D865264B9CA985108F695BEF5B564",
        "fromMe": True,
        "sender": {
            "id": "556992962392@c.us",
            "pushName": "Elizeu"
        },
        "msgContent": {
            "audioMessage": {
                "url": "https://mmg.whatsapp.net/v/t62.7117-24/19083661_1303226854859439_3997981883652895124_n.enc?ccb=11-4&oh=01_Q5Aa2AHv1g25E-1H3jqetiO5I0A7GCCp1SbCxNT7hCJBPKZhJw&oe=68BB4268&_nc_sid=5e03e0&mms3=true",
                "mediaKey": "rwyoaVpbrjfFQ3X1YKt7Y1+pnun0a2536qDKOnT2HuQ=",
                "mimetype": "audio/ogg; codecs=opus",
                "fileLength": "5067",
                "seconds": 2,
                "ptt": True,
                "directPath": "/v/t62.7117-24/19083661_1303226854859439_3997981883652895124_n.enc?ccb=11-4&oh=01_Q5Aa2AHv1g25E-1H3jqetiO5I0A7GCCp1SbCxNT7hCJBPKZhJw&oe=68BB4268&_nc_sid=5e03e0",
                "fileSha256": "muLcy0C+OrTMaciGKHUeYxzc/UKCYHgRUVbbf+46b7U=",
                "fileEncSha256": "cG50b/Z+hq/Re57fT/W1n0pNI2ZdHsZe1KaiP6EeI/4=",
                "mediaKeyTimestamp": "1754510999",
                "waveform": "JSo2SlFTU05GTlJPTUpFQ0RBNh4TEjBBS0lIRURDQTw3REtGNCY1QEc/Mx8wRkxMSTs7TVFPSkA1QEU+OjlCRg=="
            }
        }
    }
    
    try:
        # Buscar inst√¢ncia
        instancia = WhatsappInstance.objects.get(instance_id="3B6XIW-ZTS923-GEAY6V")
        cliente = instancia.cliente
        
        print(f"‚úÖ Inst√¢ncia encontrada: {instancia.instance_id}")
        print(f"‚úÖ Cliente: {cliente.nome}")
        print(f"‚úÖ Token: {'‚úÖ' if instancia.token else '‚ùå'}")
        
        # Testar processamento autom√°tico
        print("\nüîÑ Testando processamento autom√°tico...")
        resultado = process_media_automatically(webhook_data, cliente, instancia)
        
        if resultado:
            print("‚úÖ Processamento autom√°tico funcionou!")
        else:
            print("‚ùå Processamento autom√°tico falhou!")
            
    except WhatsappInstance.DoesNotExist:
        print("‚ùå Inst√¢ncia n√£o encontrada!")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def testar_download_direto_audio():
    """Testa download direto do √°udio"""
    print("\nüåê Testando download direto do √°udio...")
    
    try:
        instancia = WhatsappInstance.objects.get(instance_id="3B6XIW-ZTS923-GEAY6V")
        
        # Dados reais do √°udio
        media_data = {
            'mediaKey': 'rwyoaVpbrjfFQ3X1YKt7Y1+pnun0a2536qDKOnT2HuQ=',
            'directPath': '/v/t62.7117-24/19083661_1303226854859439_3997981883652895124_n.enc?ccb=11-4&oh=01_Q5Aa2AHv1g25E-1H3jqetiO5I0A7GCCp1SbCxNT7hCJBPKZhJw&oe=68BB4268&_nc_sid=5e03e0',
            'type': 'audio',
            'mimetype': 'audio/ogg; codecs=opus'
        }
        
        print(f"üîÑ Testando download com dados reais:")
        print(f"   Media Key: {media_data['mediaKey']}")
        print(f"   Direct Path: {media_data['directPath']}")
        print(f"   Type: {media_data['type']}")
        print(f"   Mimetype: {media_data['mimetype']}")
        
        resultado = download_media_via_wapi(
            instancia.instance_id,
            instancia.token,
            media_data
        )
        
        if resultado and resultado.get('fileLink'):
            print("‚úÖ Download direto funcionou!")
            print(f"   File Link: {resultado['fileLink']}")
            
            # Testar salvamento
            file_path = save_media_file(
                resultado['fileLink'],
                'audio',
                'B80D865264B9CA985108F695BEF5B564',
                'Elizeu',
                instancia.cliente,
                instancia
            )
            
            if file_path:
                print(f"‚úÖ Arquivo salvo: {file_path}")
            else:
                print("‚ùå Falha ao salvar arquivo")
        else:
            print("‚ùå Download direto falhou!")
            
    except WhatsappInstance.DoesNotExist:
        print("‚ùå Inst√¢ncia n√£o encontrada!")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def verificar_midias_audio():
    """Verifica m√≠dias de √°udio existentes"""
    print("\nüìÅ Verificando m√≠dias de √°udio existentes...")
    
    midias_audio = MediaFile.objects.filter(media_type='audio')
    
    if not midias_audio.exists():
        print("‚ùå Nenhuma m√≠dia de √°udio encontrada!")
        return
    
    print(f"üìä Total de m√≠dias de √°udio: {midias_audio.count()}")
    
    for midia in midias_audio[:3]:  # Mostrar apenas as 3 primeiras
        print(f"\nüìé M√≠dia ID: {midia.id}")
        print(f"   Message ID: {midia.message_id}")
        print(f"   Sender: {midia.sender_name}")
        print(f"   Status: {midia.download_status}")
        print(f"   Arquivo: {midia.file_name}")
        print(f"   Caminho: {midia.file_path}")
        if midia.file_path:
            existe = os.path.exists(midia.file_path)
            print(f"   Existe: {'‚úÖ' if existe else '‚ùå'}")

def criar_estrutura_audio():
    """Cria estrutura espec√≠fica para √°udios"""
    print("\nüìÇ Criando estrutura para √°udios...")
    
    try:
        instancia = WhatsappInstance.objects.get(instance_id="3B6XIW-ZTS923-GEAY6V")
        cliente = instancia.cliente
        
        # Criar pasta de √°udio
        audio_path = Path(__file__).parent / "media_storage" / f"cliente_{cliente.id}" / f"instance_{instancia.instance_id}" / "audio"
        audio_path.mkdir(parents=True, exist_ok=True)
        
        print(f"‚úÖ Pasta de √°udio criada: {audio_path}")
        
        # Verificar se a pasta existe
        if audio_path.exists():
            print("‚úÖ Pasta de √°udio existe e est√° acess√≠vel")
        else:
            print("‚ùå Pasta de √°udio n√£o foi criada")
            
    except Exception as e:
        print(f"‚ùå Erro ao criar estrutura: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Testando webhook de √°udio real...")
    print("=" * 60)
    
    # Criar estrutura
    criar_estrutura_audio()
    
    # Verificar m√≠dias existentes
    verificar_midias_audio()
    
    # Testar com dados reais
    testar_webhook_audio_real()
    
    # Testar download direto
    testar_download_direto_audio()
    
    print("\n" + "=" * 60)
    print("‚úÖ Teste conclu√≠do!")

if __name__ == "__main__":
    main() 