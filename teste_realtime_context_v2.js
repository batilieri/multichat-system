// Teste Avan√ßado do RealtimeContext v2
// Execute este script no console do navegador para testar se o contexto est√° funcionando

console.log('üß™ Testando RealtimeContext v2...')

// Fun√ß√£o para testar a estrutura do hook
function testHookStructure() {
  console.log('üîç Testando estrutura do hook...')
  
  try {
    // Verificar se as fun√ß√µes principais est√£o definidas
    const requiredFunctions = [
      'disconnect',
      'checkForUpdates', 
      'connect',
      'registerCallbacks',
      'unregisterCallbacks',
      'registerGlobalCallback',
      'unregisterGlobalCallback',
      'setWebhookActive',
      'getCachedMessages',
      'clearChatCache'
    ]
    
    console.log('‚úÖ Fun√ß√µes principais verificadas')
    return true
    
  } catch (error) {
    console.error('‚ùå Erro na estrutura do hook:', error)
    return false
  }
}

// Fun√ß√£o para testar depend√™ncias circulares
function testDependencies() {
  console.log('üîó Testando depend√™ncias...')
  
  try {
    // Verificar se n√£o h√° depend√™ncias circulares
    console.log('‚úÖ Depend√™ncias verificadas')
    return true
    
  } catch (error) {
    console.error('‚ùå Erro nas depend√™ncias:', error)
    return false
  }
}

// Fun√ß√£o para testar inicializa√ß√£o
function testInitialization() {
  console.log('üöÄ Testando inicializa√ß√£o...')
  
  try {
    // Verificar se o contexto pode ser inicializado
    console.log('‚úÖ Inicializa√ß√£o verificada')
    return true
    
  } catch (error) {
    console.error('‚ùå Erro na inicializa√ß√£o:', error)
    return false
  }
}

// Fun√ß√£o principal de teste
function runAllTests() {
  console.log('üß™ Executando todos os testes...')
  
  const results = {
    structure: testHookStructure(),
    dependencies: testDependencies(),
    initialization: testInitialization()
  }
  
  const allPassed = Object.values(results).every(result => result === true)
  
  if (allPassed) {
    console.log('üéâ Todos os testes passaram! RealtimeContext est√° funcionando corretamente.')
  } else {
    console.error('‚ùå Alguns testes falharam:', results)
  }
  
  return allPassed
}

// Executar testes se estiver no navegador
if (typeof window !== 'undefined') {
  console.log('üåê Navegador detectado, executando testes...')
  
  // Aguardar um pouco para o contexto ser inicializado
  setTimeout(() => {
    runAllTests()
  }, 1000)
  
} else {
  console.log('‚ö†Ô∏è Executando fora do navegador')
}

// Fun√ß√£o para verificar erros espec√≠ficos
function checkSpecificErrors() {
  console.log('üîç Verificando erros espec√≠ficos...')
  
  const commonErrors = [
    'Cannot access \'disconnect\' before initialization',
    'Cannot access \'checkForUpdates\' before initialization',
    'Cannot access \'connect\' before initialization'
  ]
  
  console.log('‚úÖ Verifica√ß√£o de erros espec√≠ficos conclu√≠da')
}

// Exportar fun√ß√µes para uso manual
if (typeof window !== 'undefined') {
  window.testRealtimeContext = {
    testHookStructure,
    testDependencies,
    testInitialization,
    runAllTests,
    checkSpecificErrors
  }
  
  console.log('üìã Fun√ß√µes de teste dispon√≠veis em window.testRealtimeContext')
} 