#!/usr/bin/env python3
"""
üîç DEBUG WEBHOOK LOGS
Verifica se os logs da fun√ß√£o process_media_automatically est√£o aparecendo
"""

import os
import sys
import django
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'multichat_system.multichat.settings')
sys.path.append('multichat_system')
django.setup()

from webhook.models import WebhookEvent

def analisar_webhook_recente():
    """Analisa o webhook mais recente para debug"""
    print("üîç AN√ÅLISE DO WEBHOOK MAIS RECENTE")
    print("=" * 60)
    
    # Buscar webhook mais recente com √°udio
    webhook = WebhookEvent.objects.filter(
        raw_data__contains="audioMessage"
    ).order_by('-timestamp').first()
    
    if not webhook:
        print("‚ùå Nenhum webhook com √°udio encontrado")
        return
    
    print(f"üìß Event ID: {webhook.event_id}")
    print(f"üïí Timestamp: {webhook.timestamp}")
    print(f"üë§ Cliente: {webhook.cliente.nome}")
    print(f"‚úÖ Processed: {webhook.processed}")
    print(f"üè∑Ô∏è Event Type: {webhook.event_type}")
    
    data = webhook.raw_data
    print(f"\nüìä DADOS DO WEBHOOK:")
    print(f"   Message ID: {data.get('messageId', 'N/A')}")
    print(f"   From Me: {data.get('fromMe', 'N/A')}")
    print(f"   Instance ID: {data.get('instanceId', 'N/A')}")
    
    # Analisar dados do √°udio
    msg_content = data.get('msgContent', {})
    audio_data = msg_content.get('audioMessage', {})
    
    print(f"\nüéµ DADOS DO √ÅUDIO:")
    print(f"   MediaKey: {'‚úÖ' if audio_data.get('mediaKey') else '‚ùå'} ({len(audio_data.get('mediaKey', ''))} chars)")
    print(f"   DirectPath: {'‚úÖ' if audio_data.get('directPath') else '‚ùå'} {audio_data.get('directPath', 'N/A')[:50]}...")
    print(f"   Mimetype: {'‚úÖ' if audio_data.get('mimetype') else '‚ùå'} {audio_data.get('mimetype', 'N/A')}")
    print(f"   File Length: {audio_data.get('fileLength', 'N/A')}")
    
    # Verificar se dados s√£o v√°lidos para download
    media_key = audio_data.get('mediaKey', '')
    direct_path = audio_data.get('directPath', '')
    mimetype = audio_data.get('mimetype', '')
    
    print(f"\nüîç VALIDA√á√ÉO PARA DOWNLOAD:")
    print(f"   MediaKey v√°lida: {'‚úÖ' if media_key else '‚ùå'}")
    print(f"   DirectPath v√°lido: {'‚úÖ' if direct_path else '‚ùå'}")
    print(f"   Mimetype v√°lido: {'‚úÖ' if mimetype else '‚ùå'}")
    
    if media_key and direct_path and mimetype:
        print(f"   üéØ TODOS OS DADOS V√ÅLIDOS - deveria baixar!")
    else:
        print(f"   ‚ùå DADOS INV√ÅLIDOS - n√£o vai baixar")
        return
    
    # Verificar inst√¢ncia
    from core.models import WhatsappInstance
    try:
        instance = WhatsappInstance.objects.get(instance_id=data.get('instanceId'))
        print(f"\nüì± INST√ÇNCIA ENCONTRADA:")
        print(f"   ID: {instance.instance_id}")
        print(f"   Cliente: {instance.cliente.nome}")
        print(f"   Token: {'‚úÖ' if instance.token else '‚ùå'} {instance.token[:20] if instance.token else 'AUSENTE'}...")
        print(f"   Status: {instance.status}")
    except:
        print(f"\n‚ùå INST√ÇNCIA N√ÉO ENCONTRADA: {data.get('instanceId')}")
        return
    
    # Simular a chamada da fun√ß√£o
    print(f"\nüß™ SIMULANDO CHAMADA process_media_automatically...")
    try:
        from webhook.views import process_media_automatically
        resultado = process_media_automatically(data, webhook.cliente, instance)
        print(f"   ‚úÖ Resultado: {resultado}")
    except Exception as e:
        print(f"   ‚ùå Erro na simula√ß√£o: {e}")
        import traceback
        traceback.print_exc()

def testar_funcao_download():
    """Testa diretamente a fun√ß√£o de download"""
    print(f"\nüß™ TESTE DIRETO DA FUN√á√ÉO DOWNLOAD")
    print("=" * 60)
    
    # Buscar webhook recente
    webhook = WebhookEvent.objects.filter(
        raw_data__contains="audioMessage"
    ).order_by('-timestamp').first()
    
    if not webhook:
        print("‚ùå Nenhum webhook encontrado")
        return
    
    data = webhook.raw_data
    audio_data = data.get('msgContent', {}).get('audioMessage', {})
    
    # Preparar dados para teste
    media_data = {
        'mediaKey': audio_data.get('mediaKey', ''),
        'directPath': audio_data.get('directPath', ''),
        'type': 'audio',
        'mimetype': audio_data.get('mimetype', '')
    }
    
    print(f"üìä Dados para teste:")
    for key, value in media_data.items():
        if isinstance(value, str) and len(value) > 50:
            print(f"   {key}: {value[:50]}...")
        else:
            print(f"   {key}: {value}")
    
    # Buscar inst√¢ncia
    from core.models import WhatsappInstance
    try:
        instance = WhatsappInstance.objects.get(instance_id=data.get('instanceId'))
        
        print(f"\nüîÑ Testando download_media_via_wapi...")
        
        from webhook.views import download_media_via_wapi
        resultado = download_media_via_wapi(
            instance.instance_id,
            instance.token,
            media_data
        )
        
        print(f"‚úÖ Resultado: {type(resultado)} - {resultado}")
        
        if isinstance(resultado, str):
            from pathlib import Path
            if Path(resultado).exists():
                print(f"‚úÖ Arquivo existe: {resultado}")
            else:
                print(f"‚ùå Arquivo n√£o existe: {resultado}")
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Fun√ß√£o principal"""
    print("üîç DEBUG WEBHOOK LOGS - INVESTIGA√á√ÉO DETALHADA")
    print("=" * 80)
    
    analisar_webhook_recente()
    testar_funcao_download()
    
    print(f"\nüí° CONCLUS√ïES:")
    print("‚úÖ Se os dados est√£o v√°lidos mas o arquivo n√£o baixa:")
    print("   - Problema pode estar na fun√ß√£o download_media_via_wapi")
    print("   - Ou na W-API (token, rede, etc.)")
    print("‚ùå Se os dados est√£o inv√°lidos:")
    print("   - Problema est√° na estrutura do webhook")
    print("   - Ou na extra√ß√£o dos dados")

if __name__ == "__main__":
    main() 