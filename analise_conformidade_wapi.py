#!/usr/bin/env python3
"""
üìã AN√ÅLISE DE CONFORMIDADE - W-API DOWNLOAD MEDIA
Compara√ß√£o entre implementa√ß√£o atual e documenta√ß√£o oficial
"""

import json

def analisar_conformidade_wapi():
    """Analisa conformidade com documenta√ß√£o W-API"""
    print("üìã AN√ÅLISE DE CONFORMIDADE - W-API DOWNLOAD MEDIA")
    print("=" * 80)
    
    # Documenta√ß√£o oficial fornecida pelo usu√°rio
    documentacao_oficial = {
        "endpoint": "https://api.w-api.app/v1/message/download-media?instanceId=",
        "metodo": "POST",
        "headers": {
            "Authorization": "Bearer <token>",
            "Content-Type": "application/json"
        },
        "query_params": {
            "instanceId": "obrigat√≥rio"
        },
        "body": {
            "mediaKey": "string (obrigat√≥rio)",
            "directPath": "string (obrigat√≥rio)", 
            "type": "string (image, document, audio, video)",
            "mimetype": "string (obrigat√≥rio)"
        },
        "resposta_sucesso": {
            "error": False,
            "fileLink": "https://api.w-api.app/media/file/4a863bcc-bfce-40fb-8222-7a76630b8db2_image.jpeg",
            "expires": 1746908140798
        }
    }
    
    # Implementa√ß√£o atual no sistema
    implementacao_atual = {
        "endpoint": "https://api.w-api.app/v1/message/download-media?instanceId={instance_id}",
        "metodo": "POST",
        "headers": {
            "Authorization": "Bearer {bearer_token}",
            "Content-Type": "application/json"
        },
        "query_params": {
            "instanceId": "via URL parameter"
        },
        "body": {
            "mediaKey": "media_data.get('mediaKey', '')",
            "directPath": "media_data.get('directPath', '')",
            "type": "media_data.get('type', '')",
            "mimetype": "media_data.get('mimetype', '')"
        },
        "tratamento_resposta": {
            "verifica_status_200": True,
            "verifica_error_false": True,
            "extrai_fileLink": True,
            "extrai_expires": True
        }
    }
    
    print("\nüîç 1. COMPARA√á√ÉO ENDPOINT")
    print("-" * 60)
    doc_endpoint = documentacao_oficial["endpoint"]
    impl_endpoint = implementacao_atual["endpoint"]
    
    print(f"üìö Documenta√ß√£o: {doc_endpoint}")
    print(f"üíª Implementa√ß√£o: {impl_endpoint}")
    
    if "message/download-media" in impl_endpoint and "instanceId=" in impl_endpoint:
        print("‚úÖ CONFORME: Endpoint correto")
    else:
        print("‚ùå N√ÉO CONFORME: Endpoint incorreto")
    
    print("\nüîç 2. COMPARA√á√ÉO M√âTODO HTTP")
    print("-" * 60)
    print(f"üìö Documenta√ß√£o: {documentacao_oficial['metodo']}")
    print(f"üíª Implementa√ß√£o: {implementacao_atual['metodo']}")
    print("‚úÖ CONFORME: M√©todo POST")
    
    print("\nüîç 3. COMPARA√á√ÉO HEADERS")
    print("-" * 60)
    doc_headers = documentacao_oficial["headers"]
    impl_headers = implementacao_atual["headers"]
    
    for header, valor in doc_headers.items():
        print(f"üìö {header}: {valor}")
        if header in impl_headers:
            print(f"üíª {header}: {impl_headers[header]}")
            print("‚úÖ CONFORME")
        else:
            print("‚ùå N√ÉO CONFORME: Header ausente")
        print()
    
    print("\nüîç 4. COMPARA√á√ÉO QUERY PARAMS")
    print("-" * 60)
    print("üìö instanceId: obrigat√≥rio via query param")
    print("üíª instanceId: passado via URL template")
    print("‚úÖ CONFORME: instanceId sendo passado corretamente")
    
    print("\nüîç 5. COMPARA√á√ÉO BODY/PAYLOAD")
    print("-" * 60)
    doc_body = documentacao_oficial["body"]
    impl_body = implementacao_atual["body"]
    
    campos_obrigatorios = ["mediaKey", "directPath", "type", "mimetype"]
    
    for campo in campos_obrigatorios:
        print(f"\nüìã Campo: {campo}")
        print(f"üìö Documenta√ß√£o: {doc_body[campo]}")
        print(f"üíª Implementa√ß√£o: {impl_body[campo]}")
        
        if campo in impl_body:
            print("‚úÖ CONFORME: Campo presente")
        else:
            print("‚ùå N√ÉO CONFORME: Campo ausente")
    
    print("\nüîç 6. COMPARA√á√ÉO TRATAMENTO DE RESPOSTA")
    print("-" * 60)
    doc_resposta = documentacao_oficial["resposta_sucesso"]
    impl_tratamento = implementacao_atual["tratamento_resposta"]
    
    print("üìö Resposta esperada:")
    print(json.dumps(doc_resposta, indent=2))
    
    print("\nüíª Tratamento implementado:")
    for tratamento, implementado in impl_tratamento.items():
        status = "‚úÖ" if implementado else "‚ùå"
        print(f"   {status} {tratamento}")
    
    print("\nüîç 7. PROBLEMAS IDENTIFICADOS NA IMPLEMENTA√á√ÉO")
    print("-" * 60)
    
    problemas = []
    
    # Verificar se campos podem estar vazios
    print("‚ö†Ô∏è PROBLEMA POTENCIAL 1: Campos podem estar vazios")
    print("   Implementa√ß√£o atual usa .get('campo', '') que pode retornar string vazia")
    print("   W-API pode rejeitar campos vazios")
    problemas.append("Campos podem estar vazios")
    
    # Verificar valida√ß√£o de dados
    print("\n‚ö†Ô∏è PROBLEMA POTENCIAL 2: Sem valida√ß√£o pr√©via")
    print("   N√£o h√° valida√ß√£o se mediaKey, directPath, etc. s√£o v√°lidos antes do envio")
    print("   W-API pode rejeitar dados inv√°lidos")
    problemas.append("Falta valida√ß√£o de dados")
    
    # Verificar tratamento de erro
    print("\n‚ö†Ô∏è PROBLEMA POTENCIAL 3: Tratamento de erro pode estar incorreto")
    print("   C√≥digo verifica 'if not data.get('error', True)' ")
    print("   Isso significa que se 'error' n√£o existir, assume True (erro)")
    print("   Deveria ser 'if not data.get('error', False)'")
    problemas.append("L√≥gica de erro invertida")
    
    return problemas

def gerar_implementacao_corrigida():
    """Gera implementa√ß√£o corrigida baseada na documenta√ß√£o"""
    print("\nüîß IMPLEMENTA√á√ÉO CORRIGIDA SUGERIDA")
    print("=" * 80)
    
    codigo_corrigido = '''
def download_media_via_wapi_corrigido(instance_id, bearer_token, media_data):
    """
    Download de m√≠dia via W-API - CORRIGIDO conforme documenta√ß√£o oficial
    """
    import requests
    import json
    import time
    
    # 1. VALIDA√á√ÉO PR√âVIA DOS DADOS (NOVO)
    campos_obrigatorios = ['mediaKey', 'directPath', 'type', 'mimetype']
    for campo in campos_obrigatorios:
        if not media_data.get(campo):
            print(f"‚ùå Campo obrigat√≥rio ausente: {campo}")
            return None
    
    # 2. ENDPOINT CONFORME DOCUMENTA√á√ÉO
    url = f"https://api.w-api.app/v1/message/download-media?instanceId={instance_id}"
    
    # 3. HEADERS CONFORME DOCUMENTA√á√ÉO
    headers = {
        'Authorization': f'Bearer {bearer_token}',
        'Content-Type': 'application/json'
    }
    
    # 4. PAYLOAD CONFORME DOCUMENTA√á√ÉO
    payload = {
        'mediaKey': media_data['mediaKey'],      # Sem .get() para garantir que existe
        'directPath': media_data['directPath'],  # Sem .get() para garantir que existe
        'type': media_data['type'],              # Sem .get() para garantir que existe
        'mimetype': media_data['mimetype']       # Sem .get() para garantir que existe
    }
    
    print(f"üîÑ Requisi√ß√£o W-API:")
    print(f"   URL: {url}")
    print(f"   Headers: {json.dumps(headers, indent=2)}")
    print(f"   Payload: {json.dumps(payload, indent=2)}")
    
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        
        print(f"üì° Status: {response.status_code}")
        print(f"üì® Resposta: {response.text}")
        
        if response.status_code == 200:
            data = response.json()
            
            # 5. TRATAMENTO DE RESPOSTA CORRIGIDO
            if data.get('error', False) == False:  # CORRIGIDO: error deve ser False
                print(f"‚úÖ Download bem-sucedido!")
                print(f"   fileLink: {data.get('fileLink')}")
                print(f"   expires: {data.get('expires')}")
                return data
            else:
                print(f"‚ùå Erro retornado pela API: {data}")
                return None
        else:
            print(f"‚ùå Status HTTP inv√°lido: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None
'''
    
    print(codigo_corrigido)
    
    print("\nüìã PRINCIPAIS CORRE√á√ïES:")
    print("-" * 60)
    print("1. ‚úÖ Valida√ß√£o pr√©via de campos obrigat√≥rios")
    print("2. ‚úÖ Remo√ß√£o de .get() com valores padr√£o vazios")
    print("3. ‚úÖ Corre√ß√£o da l√≥gica de verifica√ß√£o de erro")
    print("4. ‚úÖ Logs mais detalhados para debug")
    print("5. ‚úÖ Timeout adequado (30s)")

def main():
    """Fun√ß√£o principal"""
    print("üìã AN√ÅLISE COMPLETA DE CONFORMIDADE W-API")
    print("=" * 80)
    
    # Analisar conformidade
    problemas = analisar_conformidade_wapi()
    
    # Gerar implementa√ß√£o corrigida
    gerar_implementacao_corrigida()
    
    print("\nüìä RESUMO FINAL")
    print("=" * 80)
    print(f"‚úÖ Endpoint: CONFORME")
    print(f"‚úÖ M√©todo: CONFORME") 
    print(f"‚úÖ Headers: CONFORME")
    print(f"‚úÖ Query Params: CONFORME")
    print(f"‚úÖ Payload: CONFORME (estrutura)")
    
    print(f"\n‚ùå PROBLEMAS ENCONTRADOS: {len(problemas)}")
    for i, problema in enumerate(problemas, 1):
        print(f"   {i}. {problema}")
    
    print("\nüéØ CONCLUS√ÉO:")
    print("A implementa√ß√£o est√° ESTRUTURALMENTE CORRETA,")
    print("mas tem PROBLEMAS DE VALIDA√á√ÉO E L√ìGICA que podem")
    print("estar causando as falhas no download autom√°tico.")
    
    print("\nüîß RECOMENDA√á√ÉO:")
    print("Implementar a vers√£o corrigida sugerida acima!")

if __name__ == "__main__":
    main() 